rm(ca_boundary, ca_kbdi_high_2017, ca_wells, ca_wells_risky)
# removes datasets we don't need anymore
rm(ca_boundary, ca_kbdi_high_2017, ca_wells, ca_wells_risky)
# preps data for this analysis
ca_boundary <- us_states %>% filter(NAME == "California") %>% st_geometry()
ca_kbdi_high_2090 <- crop(raster_kbdi_high_2090, as(ca_boundary, "Spatial"))
ca_wells <- readRDS("data/interim/enverus_wells.rds") %>%
filter(well_status %in% c("ABANDONED", "ACTIVE", "COMPLETED",
"DRILLED", "DRILLING", "INACTIVE",
"P&A"))
ca_wells <- readRDS("data/interim/enverus_wells.rds") %>%
filter(state == "CA") %>%
filter(well_status %in% c("ABANDONED", "ACTIVE", "COMPLETED",
"DRILLED", "DRILLING", "INACTIVE",
"P&A"))
# visualizes the data
plot(ca_boundary, bg = NA, axes = F)
plot(st_geometry(ca_wells), pch = 4, col = alpha("gray", 0.9), add = T)
plot(ca_kbdi_high_2090, col = alpha("red", 0.5), add = T)
par(bty = "n")
# for each well point, extrats the value of the KBDI raster
ca_wells_risky <- raster::extract(raster_kbdi_high_2090, as(ca_wells,"Spatial"))
# since we've set pixels with ≥ 600 KBDI a value of 1, all we need to do is take
# the sum of the resulting vector (removing NAs) to get the count of wells
sum(ca_wells_risky, na.rm = T)  # n = 100,083
ca_kbdi_high_2050 <- crop(raster_kbdi_high_2050, as(ca_boundary, "Spatial"))
# visualizes the data
plot(ca_boundary, bg = NA, axes = F)
plot(st_geometry(ca_wells), pch = 4, col = alpha("gray", 0.9), add = T)
plot(ca_kbdi_high_2050, col = alpha("red", 0.5), add = T)
par(bty = "n")
# for each well point, extrats the value of the KBDI raster
ca_wells_risky <- raster::extract(raster_kbdi_high_2050, as(ca_wells,"Spatial"))
# since we've set pixels with ≥ 600 KBDI a value of 1, all we need to do is take
# the sum of the resulting vector (removing NAs) to get the count of wells
sum(ca_wells_risky, na.rm = T)  # n = 100,083
# for each well point, extrats the value of the KBDI raster
ca_wells_risky_2050 <-
raster::extract(raster_kbdi_high_2050, as(ca_wells,"Spatial"))
# since we've set pixels with ≥ 600 KBDI a value of 1, all we need to do is take
# the sum of the resulting vector (removing NAs) to get the count of wells
sum(ca_wells_risky_2050, na.rm = T)  # n = 100,083
# for each well point, extrats the value of the KBDI raster
ca_wells_risky_2090 <- raster::extract(raster_kbdi_high_2090, as(ca_wells,"Spatial"))
sum(ca_wells_risky_2050, na.rm = T)  # n = 100,083
sum(ca_wells_risky_2090, na.rm = T)  # n = 100,083
# loads necessary packages and defines global variables
source("code/0-setup/01-setup.R")
# attaches packages we need for this script
library("raster")
library("scales")
# data input
raster_kbdi_high_2017 <- readRDS("data/processed/raster_high_kbdi_2017.rds")
raster_kbdi_high_2050 <- readRDS("data/processed/raster_high_kbdi_2050.rds")
raster_kbdi_high_2090 <- readRDS("data/processed/raster_high_kbdi_2090.rds")
us_states             <- st_read("data/raw/us_census/tl_2018_us_state.shp")
# preps data for this analysis
ca_boundary <- us_states %>% filter(NAME == "California") %>% st_geometry()
ca_kbdi_high_2017 <- crop(raster_kbdi_high_2017, as(ca_boundary, "Spatial"))
ca_wells <- readRDS("data/interim/enverus_wells.rds") %>%
filter(state == "CA") %>%
filter(well_status %in% c("ABANDONED", "ACTIVE", "COMPLETED",
"DRILLED", "DRILLING", "INACTIVE",
"P&A"))x
# visualizes the data
plot(ca_boundary, bg = NA, axes = F)
plot(st_geometry(ca_wells), pch = 4, col = alpha("gray", 0.9), add = T)
plot(ca_kbdi_high_2017, col = alpha("red", 0.5), add = T)
par(bty = "n")
# for each well point, extrats the value of the KBDI raster
ca_wells_risky <- raster::extract(raster_kbdi_high_2017, as(ca_wells,"Spatial"))
# since we've set pixels with ≥ 600 KBDI a value of 1, all we need to do is take
# the sum of the resulting vector (removing NAs) to get the count of wells
sum(ca_wells_risky, na.rm = T)  # n = 100,083
# removes datasets we don't need anymore
rm(ca_boundary, ca_kbdi_high_2017, ca_wells, ca_wells_risky)
# preps data for this analysis
ca_boundary <- us_states %>% filter(NAME == "California") %>% st_geometry()
ca_kbdi_high_2050 <- crop(raster_kbdi_high_2050, as(ca_boundary, "Spatial"))
ca_wells <- readRDS("data/interim/enverus_wells.rds") %>%
filter(state == "CA") %>%
filter(well_status %in% c("ABANDONED", "ACTIVE", "COMPLETED",
"DRILLED", "DRILLING", "INACTIVE",
"P&A"))
# visualizes the data
plot(ca_boundary, bg = NA, axes = F)
plot(st_geometry(ca_wells), pch = 4, col = alpha("gray", 0.9), add = T)
plot(ca_kbdi_high_2050, col = alpha("red", 0.5), add = T)
par(bty = "n")
# for each well point, extrats the value of the KBDI raster
ca_wells_risky_2050 <-
raster::extract(raster_kbdi_high_2050, as(ca_wells,"Spatial"))
# since we've set pixels with ≥ 600 KBDI a value of 1, all we need to do is take
# the sum of the resulting vector (removing NAs) to get the count of wells
sum(ca_wells_risky_2050, na.rm = T)  # n = 100,083
# removes datasets we don't need anymore
rm(ca_boundary, ca_kbdi_high_2050, ca_wells, ca_wells_risky)
# preps data for this analysis
ca_boundary <- us_states %>% filter(NAME == "California") %>% st_geometry()
ca_kbdi_high_2090 <- crop(raster_kbdi_high_2090, as(ca_boundary, "Spatial"))
ca_wells <- readRDS("data/interim/enverus_wells.rds") %>%
filter(state == "CA") %>%
filter(well_status %in% c("ABANDONED", "ACTIVE", "COMPLETED",
"DRILLED", "DRILLING", "INACTIVE",
"P&A"))
# visualizes the data
plot(ca_boundary, bg = NA, axes = F)
plot(st_geometry(ca_wells), pch = 4, col = alpha("gray", 0.9), add = T)
plot(ca_kbdi_high_2090, col = alpha("red", 0.5), add = T)
par(bty = "n")
# for each well point, extrats the value of the KBDI raster
ca_wells_risky_2090 <-
raster::extract(raster_kbdi_high_2090, as(ca_wells,"Spatial"))
# since we've set pixels with ≥ 600 KBDI a value of 1, all we need to do is take
# the sum of the resulting vector (removing NAs) to get the count of wells
sum(ca_wells_risky_2090, na.rm = T)  # n = 100,083
# removes datasets we don't need anymore
rm(ca_boundary, ca_kbdi_high_2090, ca_wells, ca_wells_risky)
## header 1 --------------------------------------------------------
sum(ca_wells_risky_2017, na.rm = T)
# for each well point, extrats the value of the KBDI raster
ca_wells_risky_2017 <-
raster::extract(raster_kbdi_high_2017, as(ca_wells,"Spatial"))
# data input
raster_kbdi_high_2017 <- readRDS("data/processed/raster_high_kbdi_2017.rds")
raster_kbdi_high_2050 <- readRDS("data/processed/raster_high_kbdi_2050.rds")
raster_kbdi_high_2090 <- readRDS("data/processed/raster_high_kbdi_2090.rds")
us_states             <- st_read("data/raw/us_census/tl_2018_us_state.shp")
## California -------------------------------------------------------
# preps data for this analysis
ca_boundary <- us_states %>% filter(NAME == "California") %>% st_geometry()
ca_kbdi_high_2017 <- crop(raster_kbdi_high_2017, as(ca_boundary, "Spatial"))
ca_wells <- readRDS("data/interim/enverus_wells.rds") %>%
filter(state == "CA") %>%
filter(well_status %in% c("ABANDONED", "ACTIVE", "COMPLETED",
"DRILLED", "DRILLING", "INACTIVE",
"P&A"))x
ca_wells <- readRDS("data/interim/enverus_wells.rds") %>%
filter(state == "CA") %>%
filter(well_status %in% c("ABANDONED", "ACTIVE", "COMPLETED",
"DRILLED", "DRILLING", "INACTIVE",
"P&A"))
# visualizes the data
plot(ca_boundary, bg = NA, axes = F)
plot(st_geometry(ca_wells), pch = 4, col = alpha("gray", 0.9), add = T)
plot(ca_kbdi_high_2017, col = alpha("red", 0.5), add = T)
par(bty = "n")
# for each well point, extrats the value of the KBDI raster
ca_wells_risky_2017 <-
raster::extract(raster_kbdi_high_2017, as(ca_wells,"Spatial"))
# since we've set pixels with ≥ 600 KBDI a value of 1, all we need to do is take
# the sum of the resulting vector (removing NAs) to get the count of wells
sum(ca_wells_risky_2017, na.rm = T)  # n = 100,083
# removes datasets we don't need anymore
rm(ca_boundary, ca_kbdi_high_2017, ca_wells, ca_wells_risky)
#### 2050 #### fix
# preps data for this analysis
ca_boundary <- us_states %>% filter(NAME == "California") %>% st_geometry()
ca_kbdi_high_2050 <- crop(raster_kbdi_high_2050, as(ca_boundary, "Spatial"))
ca_wells <- readRDS("data/interim/enverus_wells.rds") %>%
filter(state == "CA") %>%
filter(well_status %in% c("ABANDONED", "ACTIVE", "COMPLETED",
"DRILLED", "DRILLING", "INACTIVE",
"P&A"))
# visualizes the data
plot(ca_boundary, bg = NA, axes = F)
plot(st_geometry(ca_wells), pch = 4, col = alpha("gray", 0.9), add = T)
plot(ca_kbdi_high_2050, col = alpha("red", 0.5), add = T)
par(bty = "n")
# for each well point, extrats the value of the KBDI raster
ca_wells_risky_2050 <-
raster::extract(raster_kbdi_high_2050, as(ca_wells,"Spatial"))
# since we've set pixels with ≥ 600 KBDI a value of 1, all we need to do is take
# the sum of the resulting vector (removing NAs) to get the count of wells
sum(ca_wells_risky_2050, na.rm = T)  # n = ...
# removes datasets we don't need anymore
rm(ca_boundary, ca_kbdi_high_2050, ca_wells, ca_wells_risky)
#### 2090 #### fix
# preps data for this analysis
ca_boundary <- us_states %>% filter(NAME == "California") %>% st_geometry()
ca_kbdi_high_2090 <- crop(raster_kbdi_high_2090, as(ca_boundary, "Spatial"))
ca_wells <- readRDS("data/interim/enverus_wells.rds") %>%
filter(state == "CA") %>%
filter(well_status %in% c("ABANDONED", "ACTIVE", "COMPLETED",
"DRILLED", "DRILLING", "INACTIVE",
"P&A"))
# visualizes the data
plot(ca_boundary, bg = NA, axes = F)
plot(st_geometry(ca_wells), pch = 4, col = alpha("gray", 0.9), add = T)
plot(ca_kbdi_high_2090, col = alpha("red", 0.5), add = T)
par(bty = "n")
# for each well point, extrats the value of the KBDI raster
ca_wells_risky_2090 <-
raster::extract(raster_kbdi_high_2090, as(ca_wells,"Spatial"))
# since we've set pixels with ≥ 600 KBDI a value of 1, all we need to do is take
# the sum of the resulting vector (removing NAs) to get the count of wells
sum(ca_wells_risky_2090, na.rm = T)  # n =
# removes datasets we don't need anymore
rm(ca_boundary, ca_kbdi_high_2090, ca_wells, ca_wells_risky)
## header 1 --------------------------------------------------------
## description
sum(ca_wells_risky_2017, na.rm = T)
sum(ca_wells_risky_2050, na.rm = T)
sum(ca_wells_risky_2090, na.rm = T)
# loads necessary packages and defines global variables
source("code/0-setup/01-setup.R")
# attaches packages we need for this script
library("ncdf4")
library("graphics")
library("usethis")
library("raster")
library("viridis")
library("terra")
library("tidync")
# attaches packages we need for this script
library("raster")
library("scales")
# data input
raster_kbdi_high_2017 <- readRDS("data/processed/raster_high_kbdi_2017.rds")
# preps data for this analysis
ca_boundary <- us_states %>% filter(NAME == "California") %>% st_geometry()
us_states             <- st_read("data/raw/us_census/tl_2018_us_state.shp")
# preps data for this analysis
ca_boundary <- us_states %>% filter(NAME == "California") %>% st_geometry()
# visualizes the data
plot(ca_boundary, bg = NA, axes = F)
plot(st_geometry(ca_wells), pch = 4, col = alpha("gray", 0.9), add = T)
# preps data for this analysis
ca_boundary <- us_states %>% filter(NAME == "California") %>% st_geometry()
ca_kbdi_high_2017 <- crop(raster_kbdi_high_2017, as(ca_boundary, "Spatial"))
ca_wells <- readRDS("data/interim/enverus_wells.rds") %>%
filter(state == "CA") %>%
filter(well_status %in% c("ABANDONED", "ACTIVE", "COMPLETED",
"DRILLED", "DRILLING", "INACTIVE",
"P&A"))
# visualizes the data
plot(ca_boundary, bg = NA, axes = F)
plot(st_geometry(ca_wells), pch = 4, col = alpha("gray", 0.9), add = T)
plot(ca_kbdi_high_2017, col = alpha("red", 0.5), add = T)
par(bty = "n")
# for each well point, extrats the value of the KBDI raster
ca_wells_risky_2017 <-
raster::extract(raster_kbdi_high_2017, as(ca_wells,"Spatial"))
# since we've set pixels with ≥ 600 KBDI a value of 1, all we need to do is take
# the sum of the resulting vector (removing NAs) to get the count of wells
sum(ca_wells_risky_2017, na.rm = T)  # n = 100,083
# loads necessary packages and defines global variables
source("code/0-setup/01-setup.R")
# attaches packages we need for this script
library("ncdf4")
library("graphics")
library("usethis")
library("raster")
library("viridis")
library("terra")
library("tidync")
# latitude and longitude data common to all 2050 layers
lon_2050     <- ncvar_get(latlon_2050, "lon") %>% as.vector()
lat_2050     <- ncvar_get(latlon_2050, "lat") %>% as.vector()
# data input ...............................................................
latlon_2050 <- nc_open("data/raw/kbdi_wildfire_risk/KBDI/MidCen/WRFlatlon.nc")
nc_spring_2050 <-
nc_open("data/raw/kbdi_wildfire_risk/KBDI/MidCen/Mean_KBDI_Spring_2046-2054_R8Y4.nc")
nc_summer_2050 <-
nc_open("data/raw/kbdi_wildfire_risk/KBDI/MidCen/Mean_KBDI_Summer_2046-2054_R8Y4.nc")
nc_fall_2050 <-
nc_open("data/raw/kbdi_wildfire_risk/KBDI/MidCen/Mean_KBDI_Fall_2046-2054_R8Y4.nc")
# gets necessary variables as numeric vectors
# latitude and longitude data common to all 2050 layers
lon_2050     <- ncvar_get(latlon_2050, "lon") %>% as.vector()
lat_2050     <- ncvar_get(latlon_2050, "lat") %>% as.vector()
lon_lat_2050 <- bind_cols(lon_2050, lat_2050)
colnames(lon_lat_2050) <- c("lon", "lat")
lon_lat_2050 <- as.matrix(lon_lat_2050)
rm(latlon_2050)
# KBDI data for spring 2050
kbdi_2050_spring      <- ncvar_get(nc_spring_2050, "KBDI")
fill_value            <- ncatt_get(nc_spring_2050, "KBDI", "_FillValue")
kbdi_2050_spring[kbdi_2050_spring == fill_value$value] <- NA
kbdi_2050_spring_long <- as.vector(kbdi_2050_spring)
# KBDI data for summer 2050
kbdi_2050_summer      <- ncvar_get(nc_summer_2050, "KBDI")
fill_value            <- ncatt_get(nc_summer_2050, "KBDI", "_FillValue")
kbdi_2050_summer[kbdi_2050_summer == fill_value$value] <- NA
kbdi_2050_summer_long <- as.vector(kbdi_2050_summer)
# KBDI data for fall 2050
kbdi_2050_fall      <- ncvar_get(nc_fall_2050, "KBDI")
fill_value          <- ncatt_get(nc_fall_2050, "KBDI", "_FillValue")
kbdi_2050_fall[kbdi_2050_fall == fill_value$value] <- NA
kbdi_2050_fall_long <- as.vector(kbdi_2050_fall)
# assembles all KBDI layers for 2050
kbdi_2050 <- data.frame(cbind(lon_lat_2050, kbdi_2050_spring_long,
kbdi_2050_summer_long, kbdi_2050_fall_long))
colnames(kbdi_2050) <- c("lon", "lat", "kbdi_spring", "kbdi_summer",
"kbdi_fall")
# finds max KBDI value for across the three seasons
kbdi_max_2050 <- kbdi_2050 %>%
as_tibble() %>%
filter(lon >= -124.79 & lon <= -85) %>%  # or <= -66.96 for entire lower U.S.
filter(lat >= 24.50 & lat <= 49.42) %>%
dplyr::mutate(kbdi_max_2050 = pmax(kbdi_spring, kbdi_summer, kbdi_fall)) %>%
dplyr::select(lon, lat, kbdi_max_2050) %>%
dplyr::rename(x = lon, y = lat) %>%
as.data.frame()
# removes files we no longer need
rm(fill_value, kbdi_2050_fall, kbdi_2050_spring, kbdi_2050_summer, nc_fall_2050,
kbdi_2050_spring_long, kbdi_2050_summer_long,
nc_spring_2050, nc_summer_2050, kbdi_2050_fall_long, lon_lat_2050r)
# removes files we no longer need
rm(fill_value, kbdi_2050_fall, kbdi_2050_spring, kbdi_2050_summer, nc_fall_2050,
kbdi_2050_spring_long, kbdi_2050_summer_long,
nc_spring_2050, nc_summer_2050, kbdi_2050_fall_long, lon_lat_2050)
us_states             <- st_read("data/raw/noaa/us_states/s_22mr22.shp")
# preps data for this analysis
ca_boundary <- us_states %>% filter(NAME == "California") %>% st_geometry()
plot(ca_boundary)
# data input
raster_kbdi_high_2017 <- readRDS("data/processed/raster_high_kbdi_2017.rds")
# attaches packages we need for this script
library("raster")
library("scales")
# preps data for this analysis
ca_boundary <- us_states %>% filter(NAME == "California") %>% st_geometry()
ca_kbdi_high_2017 <- crop(raster_kbdi_high_2017, as(ca_boundary, "Spatial"))
ca_wells <- readRDS("data/interim/enverus_wells.rds") %>%
filter(state == "CA") %>%
filter(well_status %in% c("ABANDONED", "ACTIVE", "COMPLETED",
"DRILLED", "DRILLING", "INACTIVE",
"P&A"))
# visualizes the data
plot(ca_boundary, bg = NA, axes = F)
plot(st_geometry(ca_wells), pch = 4, col = alpha("gray", 0.9), add = T)
plot(ca_kbdi_high_2017, col = alpha("red", 0.5), add = T)
par(bty = "n")
# loads necessary packages and defines global variables
source("code/0-setup/01-setup.R")
# attaches packages we need for this script
library("ncdf4")
library("graphics")
library("usethis")
library("raster")
library("viridis")
library("terra")
library("tidync")
# loads necessary packages and defines global variables
source("code/0-setup/01-setup.R")
# attaches packages we need for this script
library("ncdf4")
library("graphics")
library("usethis")
library("raster")
library("viridis")
#library("terra")
library("tidync")
# loads necessary packages and defines global variables
source("code/0-setup/01-setup.R")
# attaches packages we need for this script
#library("ncdf4")
#library("graphics")
#library("usethis")
library("raster")
# data input ...............................................................
latlon_2050 <- nc_open("data/raw/kbdi_wildfire_risk/KBDI/MidCen/WRFlatlon.nc")
nc_spring_2050 <-
nc_open("data/raw/kbdi_wildfire_risk/KBDI/MidCen/Mean_KBDI_Spring_2046-2054_R8Y4.nc")
nc_summer_2050 <-
nc_open("data/raw/kbdi_wildfire_risk/KBDI/MidCen/Mean_KBDI_Summer_2046-2054_R8Y4.nc")
nc_fall_2050 <-
nc_open("data/raw/kbdi_wildfire_risk/KBDI/MidCen/Mean_KBDI_Fall_2046-2054_R8Y4.nc")
# latitude and longitude data common to all 2050 layers
lon_2050     <- ncvar_get(latlon_2050, "lon") %>% as.vector()
# attaches packages we need for this script
library("ncdf4")
# loads necessary packages and defines global variables
source("code/0-setup/01-setup.R")
# attaches packages we need for this script
library("ncdf4")
#library("graphics")
#library("usethis")
library("raster")
# data input ...............................................................
latlon_2017 <- nc_open("data/raw/kbdi_wildfire_risk/KBDI/2017/PRISMlatlon.nc")
nc_spring_2017 <-
nc_open("data/raw/kbdi_wildfire_risk/KBDI/2017/Mean_KBDI_Spring_2017.nc")
nc_summer_2017 <-
nc_open("data/raw/kbdi_wildfire_risk/KBDI/2017/Mean_KBDI_Summer_2017.nc")
nc_fall_2017 <-
nc_open("data/raw/kbdi_wildfire_risk/KBDI/2017/Mean_KBDI_Fall_2017.nc")
# latitude and longitude data common to all 2017 layers
lon_2017     <- ncvar_get(latlon_2017, "lon")
lat_2017     <- ncvar_get(latlon_2017, "lat")
lon_lat_2017 <- as.matrix(expand.grid(lon_2017, lat_2017))
rm(latlon_2017, lon_2017, lat_2017)
# removes files we no longer need
rm(fill_value, kbdi_2017_fall, kbdi_2017_spring, kbdi_2017_summer, nc_fall_2017,
kbdi_2017_spring_long, kbdi_2017_summer_long,
nc_spring_2017, nc_summer_2017, kbdi_2017_fall_long, lon_lat_2017)
# data input ...............................................................
latlon_2050 <- nc_open("data/raw/kbdi_wildfire_risk/KBDI/MidCen/WRFlatlon.nc")
nc_spring_2050 <-
nc_open("data/raw/kbdi_wildfire_risk/KBDI/MidCen/Mean_KBDI_Spring_2046-2054_R8Y4.nc")
nc_summer_2050 <-
nc_open("data/raw/kbdi_wildfire_risk/KBDI/MidCen/Mean_KBDI_Summer_2046-2054_R8Y4.nc")
nc_fall_2050 <-
nc_open("data/raw/kbdi_wildfire_risk/KBDI/MidCen/Mean_KBDI_Fall_2046-2054_R8Y4.nc")
# latitude and longitude data common to all 2050 layers
lon_2050     <- ncvar_get(latlon_2050, "lon") %>% as.vector()
lat_2050     <- ncvar_get(latlon_2050, "lat") %>% as.vector()
lon_lat_2050 <- bind_cols(lon_2050, lat_2050)
colnames(lon_lat_2050) <- c("lon", "lat")
lon_lat_2050 <- as.matrix(lon_lat_2050)
rm(latlon_2050)
# KBDI data for spring 2050
kbdi_2050_spring      <- ncvar_get(nc_spring_2050, "KBDI")
fill_value            <- ncatt_get(nc_spring_2050, "KBDI", "_FillValue")
kbdi_2050_spring[kbdi_2050_spring == fill_value$value] <- NA
kbdi_2050_spring_long <- as.vector(kbdi_2050_spring)
# KBDI data for summer 2050
kbdi_2050_summer      <- ncvar_get(nc_summer_2050, "KBDI")
fill_value            <- ncatt_get(nc_summer_2050, "KBDI", "_FillValue")
kbdi_2050_summer[kbdi_2050_summer == fill_value$value] <- NA
kbdi_2050_summer_long <- as.vector(kbdi_2050_summer)
# KBDI data for fall 2050
kbdi_2050_fall      <- ncvar_get(nc_fall_2050, "KBDI")
fill_value          <- ncatt_get(nc_fall_2050, "KBDI", "_FillValue")
kbdi_2050_fall[kbdi_2050_fall == fill_value$value] <- NA
kbdi_2050_fall_long <- as.vector(kbdi_2050_fall)
# assembles all KBDI layers for 2050
kbdi_2050 <- data.frame(cbind(lon_lat_2050, kbdi_2050_spring_long,
kbdi_2050_summer_long, kbdi_2050_fall_long))
colnames(kbdi_2050) <- c("lon", "lat", "kbdi_spring", "kbdi_summer",
"kbdi_fall")
# finds max KBDI value for across the three seasons
kbdi_max_2050 <- kbdi_2050 %>%
as_tibble() %>%
filter(lon >= -124.79 & lon <= -85) %>%  # or <= -66.96 for entire lower U.S.
filter(lat >= 24.50 & lat <= 49.42) %>%
dplyr::mutate(kbdi_max_2050 = pmax(kbdi_spring, kbdi_summer, kbdi_fall)) %>%
dplyr::select(lon, lat, kbdi_max_2050) %>%
dplyr::rename(x = lon, y = lat) %>%
as.data.frame()
# removes files we no longer need
rm(fill_value, kbdi_2050_fall, kbdi_2050_spring, kbdi_2050_summer, nc_fall_2050,
kbdi_2050_spring_long, kbdi_2050_summer_long,
nc_spring_2050, nc_summer_2050, kbdi_2050_fall_long, lon_lat_2050)
kbdi_max_2050_extent_raster <-
raster(kbdi_max_2050_extent,
ncol = 362, nrow = 227, crs = CRS("+init=epsg:4326"))
# converts raster with maximum 2050 KBDI to a raster for export
kbdi_max_2050_extent <- extent(kbdi_max_2050[, (1:2)])
kbdi_max_2050_extent_raster <-
raster(kbdi_max_2050_extent,
ncol = 362, nrow = 227, crs = CRS("+init=epsg:4326"))
#ncol = 362, nrow = 227, crs = CRS("+init=epsg:4269"))
raster_kbdi_max_2050 <-
rasterize(kbdi_max_2050[, 1:2], kbdi_max_2050_extent_raster,
kbdi_max_2050[, 3], fun = max)
# restricts raster to pixels with high KBDI, i.e., ≥ 600; makes this a binary
# indicator to set up for the next step, which is to intersect with wells
raster_kbdi_high_2050 <- raster_kbdi_max_2050
raster_kbdi_high_2050[raster_kbdi_high_2050$layer <  600] <- NA
raster_kbdi_high_2050[raster_kbdi_high_2050$layer >= 600] <- 1
# visualizes wildfire risk
plot(raster_kbdi_max_2050, col = viridis(n = 20, option = "inferno"))
# visualizes wildfire risk
plot(raster_kbdi_high_2050, col = "red")
kbdi_max_2050_extent_raster <-
raster(kbdi_max_2050_extent, crs = CRS("+init=epsg:4326"))
# restricts raster to pixels with high KBDI, i.e., ≥ 600; makes this a binary
# indicator to set up for the next step, which is to intersect with wells
raster_kbdi_high_2050 <- raster_kbdi_max_2050
raster_kbdi_high_2050[raster_kbdi_high_2050$layer <  600] <- NA
raster_kbdi_high_2050[raster_kbdi_high_2050$layer >= 600] <- 1
# visualizes wildfire risk
plot(raster_kbdi_max_2050, col = viridis(n = 20, option = "inferno"))
# visualizes wildfire risk
plot(raster_kbdi_high_2050, col = "red")
kbdi_max_2050_extent_raster <-
raster(kbdi_max_2050_extent, crs = CRS("+init=epsg:3310"))
#ncol = 362, nrow = 227, crs = CRS("+init=epsg:4326"))
#ncol = 362, nrow = 227, crs = CRS("+init=epsg:4269"))
raster_kbdi_max_2050 <-
rasterize(kbdi_max_2050[, 1:2], kbdi_max_2050_extent_raster,
kbdi_max_2050[, 3], fun = max)
# restricts raster to pixels with high KBDI, i.e., ≥ 600; makes this a binary
# indicator to set up for the next step, which is to intersect with wells
raster_kbdi_high_2050 <- raster_kbdi_max_2050
raster_kbdi_high_2050[raster_kbdi_high_2050$layer <  600] <- NA
raster_kbdi_high_2050[raster_kbdi_high_2050$layer >= 600] <- 1
# visualizes wildfire risk
plot(raster_kbdi_max_2050, col = viridis(n = 20, option = "inferno"))
# visualizes wildfire risk
plot(raster_kbdi_high_2050, col = "red")
kbdi_max_2050_extent_raster <-
raster(kbdi_max_2050_extent, #crs = CRS("+init=epsg:3310"))
ncol = 362, nrow = 227, crs = CRS("+init=epsg:3310"))
#ncol = 362, nrow = 227, crs = CRS("+init=epsg:4269"))
raster_kbdi_max_2050 <-
rasterize(kbdi_max_2050[, 1:2], kbdi_max_2050_extent_raster,
kbdi_max_2050[, 3], fun = max)
# restricts raster to pixels with high KBDI, i.e., ≥ 600; makes this a binary
# indicator to set up for the next step, which is to intersect with wells
raster_kbdi_high_2050 <- raster_kbdi_max_2050
raster_kbdi_high_2050[raster_kbdi_high_2050$layer <  600] <- NA
raster_kbdi_high_2050[raster_kbdi_high_2050$layer >= 600] <- 1
# visualizes wildfire risk
plot(raster_kbdi_max_2050, col = viridis(n = 20, option = "inferno"))
# visualizes wildfire risk
plot(raster_kbdi_high_2050, col = "red")
?rasterize
remove.packages("terra")
library("terra")
