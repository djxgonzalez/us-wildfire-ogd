dplyr::mutate(kbdi_max_2017 =  pmax(kbdi_spring, kbdi_summer, kbdi_fall)) %>%
dplyr::filter(kbdi_max_2017 >= 600) %>%
dplyr::mutate(kbdi_high_2017 = 1) %>%
dplyr::select(lon, lat, kbdi_high_2017) %>%
dplyr::rename(x = lon, y = lat) %>%
as.data.frame()
# data input ...............................................................
latlon_2017 <- nc_open("data/raw/kbdi_wildfire_risk/KBDI/2017/PRISMlatlon.nc")
nc_spring_2017 <-
nc_open("data/raw/kbdi_wildfire_risk/KBDI/2017/Mean_KBDI_Spring_2017.nc")
nc_summer_2017 <-
nc_open("data/raw/kbdi_wildfire_risk/KBDI/2017/Mean_KBDI_Summer_2017.nc")
nc_fall_2017 <-
nc_open("data/raw/kbdi_wildfire_risk/KBDI/2017/Mean_KBDI_Fall_2017.nc")
# data prep ................................................................
# gets necessary variables as numeric vectors
# latitude and longitude data common to all 2017 layers
lon_2017     <- ncvar_get(latlon_2017, "lon")
lat_2017     <- ncvar_get(latlon_2017, "lat")
lon_lat_2017 <- as.matrix(expand.grid(lon_2017, lat_2017))
rm(latlon_2017, lon_2017, lat_2017)
# KBDI data for spring 2017
kbdi_2017_spring      <- ncvar_get(nc_spring_2017, "KBDI")
fill_value            <- ncatt_get(nc_spring_2017, "KBDI", "_FillValue")
kbdi_2017_spring[kbdi_2017_spring == fill_value$value] <- NA
kbdi_2017_spring_long <- as.vector(kbdi_2017_spring)
# KBDI data for summer 2017
kbdi_2017_summer      <- ncvar_get(nc_summer_2017, "KBDI")
fill_value            <- ncatt_get(nc_summer_2017, "KBDI", "_FillValue")
kbdi_2017_summer[kbdi_2017_summer == fill_value$value] <- NA
kbdi_2017_summer_long <- as.vector(kbdi_2017_summer)
# KBDI data for fall 2017
kbdi_2017_fall      <- ncvar_get(nc_fall_2017, "KBDI")
fill_value          <- ncatt_get(nc_fall_2017, "KBDI", "_FillValue")
kbdi_2017_fall[kbdi_2017_fall == fill_value$value] <- NA
kbdi_2017_fall_long <- as.vector(kbdi_2017_fall)
# assembles all KBDI layers for 2017
kbdi_2017 <- data.frame(cbind(lon_lat_2017, kbdi_2017_spring_long,
kbdi_2017_summer_long, kbdi_2017_fall_long))
colnames(kbdi_2017) <- c("lon", "lat", "kbdi_spring", "kbdi_summer",
"kbdi_fall")
# finds max KBDI value for across the three seasons
kbdi_max_2017 <- kbdi_2017 %>%
as_tibble() %>%
dplyr::mutate(kbdi_max_2017 = pmax(kbdi_spring, kbdi_summer, kbdi_fall)) %>%
dplyr::filter(kbdi_max_2017 > 0) %>%
dplyr::select(lon, lat, kbdi_max_2017) %>%
dplyr::rename(x = lon, y = lat) %>%
as.data.frame()
# finds max KBDI value for across the three seasons
kbdi_high_2017 <- kbdi_2017 %>%
as_tibble() %>%
dplyr::mutate(kbdi_max_2017 =  pmax(kbdi_spring, kbdi_summer, kbdi_fall)) %>%
dplyr::filter(kbdi_max_2017 >= 600) %>%
dplyr::mutate(kbdi_high_2017 = 1) %>%
dplyr::select(lon, lat, kbdi_high_2017) %>%
dplyr::rename(x = lon, y = lat) %>%
as.data.frame()
# converts to a raster for additional analyses with CRS NAD83
raster_kbdi_max_2017 <-
rasterFromXYZ(kbdi_2017_max, crs = CRS("+init=epsg:4269"))
# finds max KBDI value for across the three seasons
kbdi_max_2017 <- kbdi_2017 %>%
as_tibble() %>%
dplyr::mutate(kbdi_max_2017 = pmax(kbdi_spring, kbdi_summer, kbdi_fall)) %>%
dplyr::filter(kbdi_max_2017 > 0) %>%
dplyr::select(lon, lat, kbdi_max_2017) %>%
dplyr::rename(x = lon, y = lat) %>%
as.data.frame()
# finds max KBDI value for across the three seasons
kbdi_high_2017 <- kbdi_2017 %>%
as_tibble() %>%
dplyr::mutate(kbdi_max_2017 =  pmax(kbdi_spring, kbdi_summer, kbdi_fall)) %>%
dplyr::filter(kbdi_max_2017 >= 600) %>%
dplyr::mutate(kbdi_high_2017 = 1) %>%
dplyr::select(lon, lat, kbdi_high_2017) %>%
dplyr::rename(x = lon, y = lat) %>%
as.data.frame()
# converts to a raster for additional analyses with CRS NAD83
raster_kbdi_max_2017 <-
rasterFromXYZ(kbdi_2017_max, crs = CRS("+init=epsg:4269"))
# converts to a raster for additional analyses with CRS NAD83
raster_kbdi_max_2017 <-
rasterFromXYZ(kbdi_max_2017, crs = CRS("+init=epsg:4269"))
raster_kbdi_high_2017 <-
rasterFromXYZ(kbdi_high_2017, crs = CRS("+init=epsg:4269"))
# visualizes wildfire risk
plot(raster_kbdi_max_2017, col = viridis(n = 20, option = "inferno"))
# visualizes wildfire risk
plot(raster_kbdi_max_2017, col = "red")
raster_kbdi_max_2017$kbdi_max_2017
# finds max KBDI value for across the three seasons
kbdi_high_2017 <- kbdi_2017 %>%
as_tibble() %>%
dplyr::mutate(kbdi_max_2017 =  pmax(kbdi_spring, kbdi_summer, kbdi_fall)) %>%
dplyr::filter(kbdi_max_2017 >= 0) %>%
dplyr::select(lon, lat, kbdi_high_2017) %>%
dplyr::rename(x = lon, y = lat) %>%
as.data.frame()
# finds max KBDI value for across the three seasons
kbdi_high_2017 <- kbdi_2017 %>%
as_tibble() %>%
dplyr::mutate(kbdi_max_2017 =  pmax(kbdi_spring, kbdi_summer, kbdi_fall)) %>%
dplyr::filter(kbdi_max_2017 >= 0) %>%
dplyr::select(lon, lat, kbdi_max_2017) %>%
dplyr::rename(x = lon, y = lat) %>%
as.data.frame()
r <- raster_kbdi_high_2017 %>% terra::rast()
?terra::rast()
# attaches packages we need for this script
library("ncdf4")
library("graphics")
library("usethis")
library("raster")
library("viridis")
library("terra")
library("tidync")
# loads necessary packages and defines global variables
source("code/0-setup/01-setup.R")
# data input ...............................................................
latlon_2017 <- nc_open("data/raw/kbdi_wildfire_risk/KBDI/2017/PRISMlatlon.nc")
nc_spring_2017 <-
nc_open("data/raw/kbdi_wildfire_risk/KBDI/2017/Mean_KBDI_Spring_2017.nc")
nc_summer_2017 <-
nc_open("data/raw/kbdi_wildfire_risk/KBDI/2017/Mean_KBDI_Summer_2017.nc")
nc_fall_2017 <-
nc_open("data/raw/kbdi_wildfire_risk/KBDI/2017/Mean_KBDI_Fall_2017.nc")
# latitude and longitude data common to all 2017 layers
lon_2017     <- ncvar_get(latlon_2017, "lon")
lat_2017     <- ncvar_get(latlon_2017, "lat")
lon_lat_2017 <- as.matrix(expand.grid(lon_2017, lat_2017))
rm(latlon_2017, lon_2017, lat_2017)
# KBDI data for spring 2017
kbdi_2017_spring      <- ncvar_get(nc_spring_2017, "KBDI")
fill_value            <- ncatt_get(nc_spring_2017, "KBDI", "_FillValue")
kbdi_2017_spring[kbdi_2017_spring == fill_value$value] <- NA
kbdi_2017_spring_long <- as.vector(kbdi_2017_spring)
# KBDI data for summer 2017
kbdi_2017_summer      <- ncvar_get(nc_summer_2017, "KBDI")
fill_value            <- ncatt_get(nc_summer_2017, "KBDI", "_FillValue")
kbdi_2017_summer[kbdi_2017_summer == fill_value$value] <- NA
kbdi_2017_summer_long <- as.vector(kbdi_2017_summer)
# attaches packages we need for this script
library("raster")
library("terra")
# data input
raster_kbdi_high_2017 <- readRDS("data/processed/raster_kbdi_high_2017.rds")
# loads necessary packages and defines global variables
source("code/0-setup/01-setup.R")
# attaches packages we need for this script
library("raster")
library("terra")
# data input
raster_kbdi_high_2017 <- readRDS("data/processed/raster_kbdi_high_2017.rds")
# loads necessary packages and defines global variables
source("code/0-setup/01-setup.R")
# data input
raster_kbdi_high_2017 <- readRDS("data/processed/raster_max_kbdi_2017.rds")
plot(raster_kbdi_high_2017)
# data input
raster_kbdi_high_2017 <- readRDS("data/processed/raster_high_kbdi_2017.rds")
plot(raster_kbdi_high_2017)
wells_interim            <- readRDS("data/interim/enverus_wells.rds")
ca_wells <- readRDS("data/interim/enverus_wells.rds") %>%
filter(state == "CA") %>%
sample_n(1000)
rm(wells_interim)
ca_wells
plot(ca_wells)
plot(st_geometry(ca_wells))
plot(raster_kbdi_high_2017, add = T, col = "red")
plot(raster_kbdi_high_2017)
plot(raster_kbdi_high_2017, col = "red")
plot(st_geometry(ca_wells))
summary(ca_wells)
plot(raster_kbdi_high_2017)
# visualizes the data
plot(raster_kbdi_high_2017, col = "red",
xmin = -125, xmax = -110)
# visualizes the data
plot(raster_kbdi_high_2017, col = "red", xlim = c(-125, -110))
?plot
plot(st_geometry(ca_wells), pch = 4, add = T)
us_states             <- st_read("data/raw/us_census/tl_2018_us_state.shp")
us_states$NAME
ca_boundary <- us_states %>% filter(NAME == "California") %>% st_geometry()
plot(st_geometry(ca_boundary), col = "black", fill = NA)
?plot
plot(raster_kbdi_high_2017, col = "red", xlim = c(-125, -110))
plot(st_geometry(ca_wells), pch = 4, add = T)
plot(st_geometry(ca_boundary), col = "black", add = T)
plot(st_geometry(ca_boundary), bg = NA, col = "black", add = T)
plot(raster_kbdi_high_2017, col = "red", xlim = c(-125, -110))
plot(st_geometry(ca_wells), pch = 4, add = T)
plot(st_geometry(ca_boundary), bg = NA, col = "black", add = T)
plot(ca_boundary, bg = NA, col = "black", add = T)
# visualizes the data
plot(raster_kbdi_high_2017, col = "red", xlim = c(-125, -110))
plot(st_geometry(ca_wells), pch = 4, add = T)
plot(ca_boundary, bg = NA, col = "black", add = T)
# visualizes the data
plot(raster_kbdi_high_2017, col = "red", xlim = c(-124, -112))
plot(ca_boundary, bg = NA, col = "black", , xlim = c(-124, -112))# add = T)
# visualizes the data
plot(raster_kbdi_high_2017, col = "red", xlim = c(-124, -112))
#plot(st_geometry(ca_wells), pch = 4, add = T)
plot(ca_boundary, bg = NA, col = "black", add = T)
# visualizes the data
plot(raster_kbdi_high_2017, col = "red",
xlim = c(-124, -112), ylim = c(30, 43))
#plot(st_geometry(ca_wells), pch = 4, add = T)
plot(ca_boundary, bg = NA, col = "black", add = T)
# visualizes the data
plot(raster_kbdi_high_2017, col = "red",
xlim = c(-125, -113), ylim = c(30, 43))
#plot(st_geometry(ca_wells), pch = 4, add = T)
plot(ca_boundary, bg = NA, col = "black", add = T)
# visualizes the data
plot(raster_kbdi_high_2017, col = "red",
xlim = c(-125.5, -113), ylim = c(30, 43))
#plot(st_geometry(ca_wells), pch = 4, add = T)
plot(ca_boundary, bg = NA, col = "black", add = T)
# visualizes the data
plot(raster_kbdi_high_2017, col = "red",
xlim = c(-125, -113), ylim = c(30, 43))
#plot(st_geometry(ca_wells), pch = 4, add = T)
plot(ca_boundary, bg = NA, col = "black", add = T)
# visualizes the data
plot(raster_kbdi_high_2017, col = "red",
xlim = c(-126, -113), ylim = c(30, 43))
#plot(st_geometry(ca_wells), pch = 4, add = T)
plot(ca_boundary, bg = NA, col = "black", add = T)
# visualizes the data
plot(raster_kbdi_high_2017, col = "red",
xlim = c(-126, -113), ylim = c(32, 43))
#plot(st_geometry(ca_wells), pch = 4, add = T)
plot(ca_boundary, bg = NA, col = "black", add = T)
# visualizes the data
plot(raster_kbdi_high_2017, col = "red",
xlim = c(-126, -113), ylim = c(32.5, 42.5))
#plot(st_geometry(ca_wells), pch = 4, add = T)
plot(ca_boundary, bg = NA, col = "black", add = T)
# visualizes the data
plot(raster_kbdi_high_2017, col = "red",
xlim = c(-126, -113), ylim = c(32.5, 42.5))
#plot(st_geometry(ca_wells), pch = 4, add = T)
plot(ca_boundary, bg = NA, col = "black", add = T)
#plot(st_geometry(ca_wells), pch = 4, add = T)
plot(ca_boundary, bg = NA, add = T)
# visualizes the data
plot(raster_kbdi_high_2017, col = "red",
xlim = c(-126, -113), ylim = c(32.5, 42.5))
#plot(st_geometry(ca_wells), pch = 4, add = T)
plot(ca_boundary, bg = NA, add = T)
plot(st_geometry(ca_wells), pch = 4, add = T)
plot(st_geometry(ca_wells), pch = 4, col = alpha("black", 0.4) add = T, )
library("scales")
# visualizes the data
plot(raster_kbdi_high_2017, col = "red",
xlim = c(-126, -113), ylim = c(32.5, 42.5))
plot(st_geometry(ca_wells), pch = 4, col = alpha("black", 0.4), add = T)
plot(ca_boundary, bg = NA, add = T)
plot(st_geometry(ca_wells), pch = 4, col = alpha("black", 0.2), add = T)
# visualizes the data
plot(raster_kbdi_high_2017, col = "red",
xlim = c(-126, -113), ylim = c(32.5, 42.5))
plot(st_geometry(ca_wells), pch = 4, col = alpha("black", 0.2), add = T)
plot(ca_boundary, bg = NA, add = T)
# loads necessary packages and defines global variables
source("code/0-setup/01-setup.R")
# attaches packages we need for this script
library("raster")
library("scales")
# data input
raster_kbdi_high_2017 <- readRDS("data/processed/raster_high_kbdi_2017.rds")
us_states             <- st_read("data/raw/us_census/tl_2018_us_state.shp")
ca_boundary <- us_states %>% filter(NAME == "California") %>% st_geometry()
ca_wells <- readRDS("data/interim/enverus_wells.rds") %>%
filter(state == "CA")
# visualizes the data
plot(raster_kbdi_high_2017, col = "red",
xlim = c(-126, -113), ylim = c(32.5, 42.5))
plot(st_geometry(ca_wells), pch = 4, col = alpha("black", 0.1), add = T)
plot(ca_boundary, bg = NA, add = T)
# visualizes the data
plot(raster_kbdi_high_2017, col = "red",
xlim = c(-126, -113), ylim = c(32.5, 42.5))
plot(st_geometry(ca_wells), pch = 4, col = alpha("black", 0.05), add = T)
plot(ca_boundary, bg = NA, add = T)
ca_kbdi_high_2017 <- crop(raster_kbdi_high_2017, ca_boundary)
ca_kbdi_high_2017 <- crop(raster_kbdi_high_2017, as(ca_boundary, "Spatial"))
ca_wells <- readRDS("data/interim/enverus_wells.rds") %>%
filter(state == "CA")
# visualizes the data
plot(raster_kbdi_high_2017, col = "red",
xlim = c(-126, -113), ylim = c(32.5, 42.5))
plot(st_geometry(ca_wells), pch = 4, col = alpha("black", 0.05), add = T)
plot(ca_boundary, bg = NA, add = T)
# visualizes the data
plot(ca_kbdi_high_2017, col = "red",
xlim = c(-126, -113), ylim = c(32.5, 42.5))
plot(ca_kbdi_high_2017)
# visualizes the data
plot(ca_kbdi_high_2017, col = "red", bty = "n")
# visualizes the data
plot(ca_kbdi_high_2017, col = "red", axes = F)
# visualizes the data
plot(ca_kbdi_high_2017, col = "red", axes = F, yxt = "n")
# visualizes the data
plot(ca_kbdi_high_2017, col = "red", axes = F, yaxt = "n")
# visualizes the data
plot(ca_kbdi_high_2017, col = "red", axes = F)
par(bty = "n")
# visualizes the data
plot(ca_kbdi_high_2017, col = "red", axes = F)
par(bty = "n")
plot(ca_kbdi_high_2017, col = "red", axes = F,
xlim = c(-126, -113), ylim = c(32.5, 42.5))
plot(st_geometry(ca_wells), pch = 4, col = alpha("black", 0.05), add = T)
plot(ca_boundary, bg = NA, add = T)
par(bty = "n")
plot(ca_kbdi_high_2017, col = "red", axes = F,
xlim = c(-126, -112.5), ylim = c(32.5, 42.5))
plot(st_geometry(ca_wells), pch = 4, col = alpha("black", 0.05), add = T)
plot(ca_boundary, bg = NA, add = T)
par(bty = "n")
# visualizes the data
plot(ca_boundary, bg = NA, axes = F)
# visualizes the data
plot(ca_boundary, bg = NA, axes = F)
plot(st_geometry(ca_wells), pch = 4, col = alpha("black", 0.05), add = T)
plot(ca_kbdi_high_2017, col = alpha("red", 0.1), add = T)
par(bty = "n")
plot(ca_boundary, bg = NA, axes = F)
plot(st_geometry(ca_wells), pch = 4, col = alpha("gray", 0.05), add = T)
plot(ca_kbdi_high_2017, col = alpha("red", 0.5), add = T)
par(bty = "n")
plot(st_geometry(ca_wells), pch = 4, col = alpha("gray", 0.1), add = T)
plot(ca_kbdi_high_2017, col = alpha("red", 0.5), add = T)
par(bty = "n")
# visualizes the data
plot(ca_boundary, bg = NA, axes = F)
plot(st_geometry(ca_wells), pch = 4, col = alpha("gray", 0.1), add = T)
plot(ca_kbdi_high_2017, col = alpha("red", 0.5), add = T)
par(bty = "n")
# visualizes the data
plot(ca_boundary, bg = NA, axes = F)
plot(st_geometry(ca_wells), pch = 4, col = alpha("gray", 0.5), add = T)
plot(ca_kbdi_high_2017, col = alpha("red", 0.5), add = T)
par(bty = "n")
# visualizes the data
plot(ca_boundary, bg = NA, axes = F)
plot(st_geometry(ca_wells), pch = 4, col = alpha("gray", 0.9), add = T)
plot(ca_kbdi_high_2017, col = alpha("red", 0.5), add = T)
par(bty = "n")
summary(as.factor(ca_wells$well_status))
ca_wells <- readRDS("data/interim/enverus_wells.rds") %>%
filter(well_status %in% c("ABANDONED", "ACTIVE", "COMPLETED",
"DRILLED", "DRILLING", "INACTIVE",
"P&A"))
# intersects wells with high risk areas
ca_wells_risky <- extract(raster_kbdi_high_2017, as(ca_wells, "Spatial"))
summary(ca_wells_risky)
ca_wells_risky %>% drop_na() %>% nrow()
sum(ca_wells_risky, na.rm=T)
?extract
# since we've set pixels with ≥ 600 KBDI a value of 1, all we need to do is take
# the sum of the resulting vector (removing NAs) to get the count of wells
sum(ca_wells_risky, na.rm=T)
# loads necessary packages and defines global variables
source("code/0-setup/01-setup.R")
# loads necessary packages and defines global variables
source("../../code/0-setup/01-setup.R")
enverus_wells <- readRDS("../../data/interim/enverus_wells.rds")
wildfires_all <- readRDS("../../data/interim/wildfires_all1.rds") %>%
##### move all of this to a data prep script
bind_rows(readRDS("../../data/interim/wildfires_all2.rds")) %>%
bind_rows(readRDS("../../data/interim/wildfires_all3.rds")) %>%
rename(wildfire_id   = Event_ID,
wildfire_name = Incid_Name,
state         = State_Name,
year          = Ig_Year) %>%
mutate(wildfire_id   = as.factor(wildfire_id),
wildfire_name = as.factor(wildfire_name),
state         = as.factor(state)) %>%
filter(state %in% c("AK", "WA", "OR", "CA", "ID", "NV", "AZ", "MT", "WY",
"UT", "CO", "NM", "ND", "SD", "NE", "KS", "OK", "TX")) %>%
mutate(year = ifelse(year > 2020, NA, year)) %>%
drop_na(year)
# loads necessary packages and defines global variables
source("../../code/0-setup/01-setup.R")
enverus_wells <- readRDS("../../data/interim/enverus_wells.rds")
wildfires_all <- readRDS("../../data/interim/wildfires_all1.rds") %>%
##### move all of this to a data prep script
bind_rows(readRDS("../../data/interim/wildfires_all2.rds")) %>%
bind_rows(readRDS("../../data/interim/wildfires_all3.rds")) %>%
rename(wildfire_id   = Event_ID,
wildfire_name = Incid_Name,
state         = State_Name,
year          = Ig_Year) %>%
mutate(wildfire_id   = as.factor(wildfire_id),
wildfire_name = as.factor(wildfire_name),
state         = as.factor(state)) %>%
filter(state == "CA") %>%
mutate(year = ifelse(year > 2020, NA, year)) %>%
drop_na(year)
wildfires_sf <- wildfires_all %>% st_as_sf(crs = crs_nad83) ##### change to WGS84
wildfires_sf <- wildfires_sf %>%
st_make_valid() %>%
# group_by(wildfire_id) %>%
# summarize(geometry = st_union(geometry)) %>%
mutate(area = st_area(wildfires_sf)) ####
##### adapted from redlining study:
#mutate(area_sqkm = (as.numeric(st_area(wildfires_all)) / 1000000))
wildfires_all %>%
distinct(wildfire_id, .keep_all = TRUE) %>%
ggplot() +
geom_bar(aes(year)) +
theme_classic()
wildfires_all %>%
distinct(wildfire_id, .keep_all = TRUE) %>%
ggplot() +
geom_bar(aes(year)) +
xlab("Year") +
ylab("Wildfires (n)") +
theme_classic()
wildfires_all %>%
distinct(wildfire_id, .keep_all = TRUE) %>%
ggplot() +
geom_bar(aes(year)) +
facet_wrap(~ state) +
theme_classic()
wildfires_all %>%
distinct(wildfire_id, .keep_all = TRUE) %>%
ggplot() +
geom_bar(aes(year)) +
xlab("Year") +
ylab("Wildfires (n)") +
theme_classic()
wildfires_ca <- readRDS("../../data/interim/wildfires_ca1.rds") %>%
##### move all of this to a data prep script
bind_rows(readRDS("../../data/interim/wildfires_ca2.rds")) %>%
bind_rows(readRDS("../../data/interim/wildfires_ca3.rds")) %>%
rename(wildfire_id   = Event_ID,
wildfire_name = Incid_Name,
state         = State_Name,
year          = Ig_Year) %>%
mutate(wildfire_id   = as.factor(wildfire_id),
wildfire_name = as.factor(wildfire_name),
state         = as.factor(state)) %>%
filter(state == "CA") %>%
mutate(year = ifelse(year > 2020, NA, year)) %>%
drop_na(year)
wildfires_ca <- readRDS("../../data/interim/wildfires_all1.rds") %>%
##### move all of this to a data prep script
bind_rows(readRDS("../../data/interim/wildfires_all2.rds")) %>%
bind_rows(readRDS("../../data/interim/wildfires_all3.rds")) %>%
rename(wildfire_id   = Event_ID,
wildfire_name = Incid_Name,
state         = State_Name,
year          = Ig_Year) %>%
mutate(wildfire_id   = as.factor(wildfire_id),
wildfire_name = as.factor(wildfire_name),
state         = as.factor(state)) %>%
filter(state == "CA") %>%
mutate(year = ifelse(year > 2020, NA, year)) %>%
drop_na(year)
rm(wildfires_all)
wildfires_ca_sf <- wildfires_ca %>% st_as_sf(crs = crs_nad83) ##### change to WGS84
wildfires_ca_sf <- wildfires_ca_sf %>%
st_make_valid() %>%
# group_by(wildfire_id) %>%
# summarize(geometry = st_union(geometry)) %>%
mutate(area = st_area(wildfires_sf)) ####
##### adapted from redlining study:
#mutate(area_sqkm = (as.numeric(st_area(wildfires_ca)) / 1000000))
wildfires_ca_sf <- wildfires_ca %>% st_as_sf(crs = crs_nad83) ##### change to WGS84
wildfires_ca_sf <- wildfires_ca_sf %>%
st_make_valid() %>%
# group_by(wildfire_id) %>%
# summarize(geometry = st_union(geometry)) %>%
mutate(area = st_area(wildfires_sf)) ####
rm(wildfires_sf)
##### adapted from redlining study:
#mutate(area_sqkm = (as.numeric(st_area(wildfires_ca)) / 1000000))
# average duration of operation:
d <- enverus_wells %>%
drop_na(first_prod_date) %>%
drop_na(last_prod_date) %>%
mutate(prod_duration = last_prod_date - first_prod_date) %>%
select(prod_duration)
d <- d %>% mutate(prod_duration = as.numeric(prod_duration)) %>%
filter(prod_duration > 0)
summary(as.numeric(d$prod_duration)/365.25)
sd(as.numeric(d$prod_duration)/365.25)
wildfires_ca %>%
distinct(wildfire_id, .keep_all = TRUE) %>%
ggplot() +
geom_bar(aes(year)) +
xlab("Year") +
ylab("Wildfires (n)") +
theme_classic()
# average duration of operation:
d <- enverus_wells %>%
drop_na(first_prod_date) %>%
drop_na(last_prod_date) %>%
mutate(prod_duration = last_prod_date - first_prod_date) %>%
select(prod_duration)
d <- d %>% mutate(prod_duration = as.numeric(prod_duration)) %>%
filter(prod_duration > 0)
summary(as.numeric(d$prod_duration)/365.25)
sd(as.numeric(d$prod_duration)/365.25)
