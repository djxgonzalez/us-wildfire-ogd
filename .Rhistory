readRDS(paste("data/interim/wells_wildfire_intersection_state_year/",
state_lower, "_", year, ".rds", sep = "")) %>%
st_as_sf() %>%
st_make_valid() %>%
mutate(dummy_index = 1) %>%  # necessary to pass to vect()
vect()
# based on input year, defines appropriate population raster and variable
pop_raster <-
case_when(year %in% c(1984:1994) ~ "pop_1990",
year %in% c(1995:2004) ~ "pop_2000",
year %in% c(2005:2014) ~ "pop_2010",
year %in% c(2015:2020) ~ "pop_2020")
pop_variable <-
case_when(year %in% c(1984:1994) ~
"pop_estimate$us_pop1990myc.population_data",
year %in% c(1995:2004) ~
"pop_estimate$us_pop2000myc.population_data",
year %in% c(2005:2014) ~
"pop_estimate$us_pop2010myc.population_data",
year %in% c(2015:2020) ~
"pop_estimate$us_pop2020myc")
# crops and masks gridded population data
pop_estimate <-
terra::crop(eval(parse(text = pop_raster)), state_year_wells_in_wildfires)
pop_estimate <-
terra::mask(pop_estimate, state_year_wells_in_wildfires, touches = TRUE)
# captures estimated population living in mask
pop_estimate <- pop_estimate %>%
as.data.frame() %>%  # coerce to dataframe
as_tibble()  # then coerce to tibble (most comfortable to work with)
estimate_out <-
tibble(state       = state_upper,
year        = year,
pop_exposed = sum(eval(parse(text = pop_variable)), na.rm = TRUE))
return(estimate_out)
}
pop_exposed_1995 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 1995)
write_csv(pop_exposed_1995, "output/results/tx_pop_exposed_1995.csv")
gc()
pop_exposed_1996 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 1996)
write_csv(pop_exposed_1996, "output/results/tx_pop_exposed_1996.csv")
gc()
pop_exposed_1997 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 1997)
write_csv(pop_exposed_1997, "output/results/tx_pop_exposed_1997.csv")
gc()
pop_exposed_1998 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 1998)
write_csv(pop_exposed_1998, "output/results/tx_pop_exposed_1998.csv")
gc()
pop_exposed_1999 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 1999)
write_csv(pop_exposed_1999, "output/results/tx_pop_exposed_1999.csv")
gc()
pop_exposed_2000 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 2000)
write_csv(pop_exposed_2000, "output/results/tx_pop_exposed_2000.csv")
gc()
pop_exposed_2001 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 2001)
write_csv(pop_exposed_2001, "output/results/tx_pop_exposed_2001.csv")
gc()
pop_exposed_2002 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 2002)
write_csv(pop_exposed_2002, "output/results/tx_pop_exposed_2002.csv")
gc()
pop_exposed_2003 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 2003)
write_csv(pop_exposed_2003, "output/results/tx_pop_exposed_2003.csv")
gc()
pop_exposed_2004 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 2004)
write_csv(pop_exposed_2004, "output/results/tx_pop_exposed_2004.csv")
rm(pop_2000)
pop_2010 <- rast("data/raw/socscape/us_pop2010myc.tif")
gc()
pop_exposed_2005 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 2005)
write_csv(pop_exposed_2005, "output/results/tx_pop_exposed_2005.csv")
gc()
pop_exposed_2006 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 2006)
write_csv(pop_exposed_2006, "output/results/tx_pop_exposed_2006.csv")
gc()
pop_exposed_2007 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 2007)
write_csv(pop_exposed_2007, "output/results/tx_pop_exposed_2007.csv")
gc()
pop_exposed_2008 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 2008)
write_csv(pop_exposed_2008, "output/results/tx_pop_exposed_2008.csv")
gc()
pop_exposed_2009 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 2009)
write_csv(pop_exposed_2009, "output/results/tx_pop_exposed_2009.csv")
gc()
pop_exposed_2010 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 2010)
write_csv(pop_exposed_2010, "output/results/tx_pop_exposed_2010.csv")
gc()
pop_exposed_2011 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 2011)
write_csv(pop_exposed_2011, "output/results/tx_pop_exposed_2011.csv")
gc()
pop_exposed_2012 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 2012)
write_csv(pop_exposed_2012, "output/results/tx_pop_exposed_2012.csv")
gc()
pop_exposed_2013 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 2013)
write_csv(pop_exposed_2013, "output/results/tx_pop_exposed_2013.csv")
gc()
pop_exposed_2014 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 2014)
write_csv(pop_exposed_2014, "output/results/tx_pop_exposed_2014.csv")
gc()
rm(pop_2020)
rm(pop_2010)
pop_2020 <- rast("data/raw/socscape/us_pop2020myc.tif")
pop_exposed_2015 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 2015)
gc()
pop_exposed_2016 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 2016)
write_csv(pop_exposed_2016, "output/results/tx_pop_exposed_2016.csv")
write_csv(pop_exposed_2015, "output/results/tx_pop_exposed_2015.csv")
gc()
pop_exposed_2017 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 2017)
write_csv(pop_exposed_2017, "output/results/tx_pop_exposed_2017.csv")
gc()
pop_exposed_2018 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 2018)
write_csv(pop_exposed_2018, "output/results/tx_pop_exposed_2018.csv")
gc()
pop_exposed_2019 <-
assessPopulationExposed(state_upper = "TX", state_lower = "tx", year = 2019)
write_csv(pop_exposed_2019, "output/results/tx_pop_exposed_2019.csv")
gc()
# attaches packages we need for this script
source("code/0-setup/01-setup.R")
library("terra")
# data input
pop_1990 <- rast("data/raw/socscape/us_pop1990myc.tif")
pop_2000 <- rast("data/raw/socscape/us_pop2000myc.tif")
pop_2010 <- rast("data/raw/socscape/us_pop2010myc.tif")
pop_2020 <- rast("data/raw/socscape/us_pop2020myc.tif")
# defines function to count population within 1 km of wells in wildfire burn
# areas for each state-year and outputs the estimate
assessPopulationExposed <- function(state_upper, state_lower, year) {
# flexibly imports relevant state-year wells in wildfire data
state_year_wells_in_wildfires <-
readRDS(paste("data/interim/wells_wildfire_intersection_state_year/",
state_lower, "_", year, ".rds", sep = "")) %>%
st_as_sf() %>%
st_make_valid() %>%
mutate(dummy_index = 1) %>%  # necessary to pass to vect()
vect()
# based on input year, defines appropriate population raster and variable
pop_raster <-
case_when(year %in% c(1984:1994) ~ "pop_1990",
year %in% c(1995:2004) ~ "pop_2000",
year %in% c(2005:2014) ~ "pop_2010",
year %in% c(2015:2020) ~ "pop_2020")
pop_variable <-
case_when(year %in% c(1984:1994) ~
"pop_estimate$us_pop1990myc.population_data",
year %in% c(1995:2004) ~
"pop_estimate$us_pop2000myc.population_data",
year %in% c(2005:2014) ~
"pop_estimate$us_pop2010myc.population_data",
year %in% c(2015:2020) ~
"pop_estimate$us_pop2020myc")
# crops and masks gridded population data
pop_estimate <-
terra::crop(eval(parse(text = pop_raster)), state_year_wells_in_wildfires)
pop_estimate <-
terra::mask(pop_estimate, state_year_wells_in_wildfires, touches = TRUE)
# captures estimated population living in mask
pop_estimate <- pop_estimate %>%
as.data.frame() %>%  # coerce to dataframe
as_tibble()  # then coerce to tibble (most comfortable to work with)
estimate_out <-
tibble(state       = state_upper,
year        = year,
pop_exposed = sum(eval(parse(text = pop_variable)), na.rm = TRUE))
return(estimate_out)
}
rm(2000)
rm(pop_2000)
rm(pop_1990)
# KS .......................................................................
# makes tibble to capture data
ks_pop_exposed <- tibble(state       = "",
year        = as.numeric(),
pop_exposed = as.numeric())
# for each state-year with >= 1 wells in wildfire burn areas (previously
# assessed), estimates population within 1 km of those wells
##### need to fix 2011
#for(year in c(1986:1998, 2000:2019)) {
for(year in c(2012:2019)) {
pop_exposed_out <-
assessPopulationExposed(state_upper = "KS", state_lower = "ks", year = year)
ks_pop_exposed <- ks_pop_exposed %>% bind_rows(pop_exposed_out)
}
# defines function to count population within 1 km of wells in wildfire burn
# areas for each state-year and outputs the estimate
assessPopulationExposed <- function(state_upper, state_lower, year) {
# flexibly imports relevant state-year wells in wildfire data
state_year_wells_in_wildfires <-
readRDS(paste("data/interim/wells_wildfire_intersection_state_year/",
state_lower, "_", year, ".rds", sep = "")) %>%
st_as_sf() %>%
st_make_valid() %>%
mutate(dummy_index = 1) %>%  # necessary to pass to vect()
vect()
# based on input year, defines appropriate population raster and variable
pop_raster <-
case_when(year %in% c(1984:1994) ~ "pop_1990",
year %in% c(1995:2004) ~ "pop_2000",
year %in% c(2005:2014) ~ "pop_2010",
year %in% c(2015:2020) ~ "pop_2020")
pop_variable <-
case_when(year %in% c(1984:1994) ~
"pop_estimate$us_pop1990myc.population_data",
year %in% c(1995:2004) ~
"pop_estimate$us_pop2000myc.population_data",
year %in% c(2005:2014) ~
"pop_estimate$us_pop2010myc.population_data",
year %in% c(2015:2020) ~
"pop_estimate$us_pop2020myc")
# crops and masks gridded population data
pop_estimate <-
terra::crop(eval(parse(text = pop_raster)), state_year_wells_in_wildfires)
pop_estimate <-
terra::mask(pop_estimate, state_year_wells_in_wildfires, touches = TRUE)
# captures estimated population living in mask
pop_estimate <- pop_estimate %>%
as.data.frame() %>%  # coerce to dataframe
as_tibble()  # then coerce to tibble (most comfortable to work with)
estimate_out <-
tibble(state       = state_upper,
year        = year,
pop_exposed = sum(eval(parse(text = pop_variable)), na.rm = TRUE))
return(estimate_out)
}
# for each state-year with >= 1 wells in wildfire burn areas (previously
# assessed), estimates population within 1 km of those wells
##### need to fix 2011
#for(year in c(1986:1998, 2000:2019)) {
for(year in c(2012:2019)) {
pop_exposed_out <-
assessPopulationExposed(state_upper = "KS", state_lower = "ks", year = year)
ks_pop_exposed <- ks_pop_exposed %>% bind_rows(pop_exposed_out)
}
# for each state-year with >= 1 wells in wildfire burn areas (previously
# assessed), estimates population within 1 km of those wells
##### need to fix 2011
#for(year in c(1986:1998, 2000:2019)) {
for(year in c(2012:2019)) {
pop_exposed_out <-
assessPopulationExposed(state_upper = "KS", state_lower = "ks", year = year)
ks_pop_exposed <- ks_pop_exposed %>% bind_rows(pop_exposed_out)
}
# attaches packages ........................................................
source("code/0-setup/01-setup.R")
library("lubridate")
wildfires_2012 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_2012.rds") %>%
st_transform(crs_albers)
wildfires_2013 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_2013.rds") %>%
st_transform(crs_albers)
wildfires_2014 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_2014.rds") %>%
st_transform(crs_albers)
wildfires_2015 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_2015.rds") %>%
st_transform(crs_albers)
wildfires_2016 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_2016.rds") %>%
st_transform(crs_albers)
wildfires_2017 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_2017.rds") %>%
st_transform(crs_albers)
wildfires_2018 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_2018.rds") %>%
st_transform(crs_albers)
wildfires_2019 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_2019.rds") %>%
st_transform(crs_albers)
## assessment by state -------------------------------------------------------
## defines function to generate identify wells within wildfire boundaries and
## and generate 1 km buffers around those wells for each state-year
makeIntersectionZone <- function(wells_in, year, state_prefix){
wells_in %>%
filter(year(date_earliest) <= year | is.na(date_earliest)) %>%
st_intersection(eval(parse(text =
(paste("wildfires_", year, sep = ""))))) %>%
st_buffer(dist = 1000) %>%
st_union() %>%
st_make_valid() %>%
saveRDS(paste("data/interim/wells_wildfire_intersection_state_year/",
state_prefix, "_", year, ".rds", sep = ""))
}
# KS .......................................................................
wells_in <- wells_all %>% filter(state == "KS")
# data input ...............................................................
wells_all <- readRDS("data/interim/wells_all.rds") %>%
st_transform(crs_albers)
# KS .......................................................................
wells_in <- wells_all %>% filter(state == "KS")
rm(wells_all)
#for(year in c(1986:1998, 2000:2019)) {
for(year in c(2012:2019)) { ##### need to run this
#for(year in c(2011)) { ##### need to fix 2011
makeIntersectionZone(wells_in, year, "ks")
}
# data input ...............................................................
wells_all <- readRDS("data/interim/wells_all.rds") %>%
st_transform(crs_albers)
# SD .......................................................................
wells_in <- wells_all %>% filter(state == "SD")  ##### need to run this
rm(wells_in)
# SD .......................................................................
wells_in <- wells_all %>% filter(state == "SD")  ##### need to run this
rm(wells_all)
for(year in c(1984:1985, 1988, 1999:2003, 2006:2007, 2011:2012, 2015:2016)) {
makeIntersectionZone(wells_in, year, "sd")
}
wells_all <- readRDS("data/interim/wells_all.rds") %>%
st_transform(crs_albers)
wildfires_1984 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_1984.rds") %>%
st_transform(crs_albers)
wildfires_1985 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_1985.rds") %>%
st_transform(crs_albers)
wildfires_1986 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_1986.rds") %>%
st_transform(crs_albers)
wildfires_1987 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_1987.rds") %>%
st_transform(crs_albers)
wildfires_1988 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_1988.rds") %>%
st_transform(crs_albers)
wildfires_1989 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_1989.rds") %>%
st_transform(crs_albers)
wildfires_1990 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_1990.rds") %>%
st_transform(crs_albers)
wildfires_1991 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_1991.rds") %>%
st_transform(crs_albers)
wildfires_1992 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_1992.rds") %>%
st_transform(crs_albers)
wildfires_1993 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_1993.rds") %>%
st_transform(crs_albers)
wildfires_1994 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_1994.rds") %>%
st_transform(crs_albers)
wildfires_1995 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_1995.rds") %>%
st_transform(crs_albers)
wildfires_1996 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_1996.rds") %>%
st_transform(crs_albers)
wildfires_1997 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_1997.rds") %>%
st_transform(crs_albers)
wildfires_1998 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_1998.rds") %>%
st_transform(crs_albers)
wildfires_1999 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_1999.rds") %>%
st_transform(crs_albers)
wildfires_2000 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_2000.rds") %>%
st_transform(crs_albers)
wildfires_2001 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_2001.rds") %>%
st_transform(crs_albers)
wildfires_2002 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_2002.rds") %>%
st_transform(crs_albers)
wildfires_2003 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_2003.rds") %>%
st_transform(crs_albers)
wildfires_2004 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_2004.rds") %>%
st_transform(crs_albers)
wildfires_2005 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_2005.rds") %>%
st_transform(crs_albers)
wildfires_2006 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_2006.rds") %>%
st_transform(crs_albers)
wildfires_2007 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_2007.rds") %>%
st_transform(crs_albers)
wildfires_2008 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_2008.rds") %>%
st_transform(crs_albers)
wildfires_2009 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_2009.rds") %>%
st_transform(crs_albers)
wildfires_2010 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_2010.rds") %>%
st_transform(crs_albers)
wildfires_2011 <-
readRDS("data/interim/wildfire_years/wildfires_union_contiguous_2011.rds") %>%
st_transform(crs_albers)
# KS .......................................................................
# makes tibble to capture data
ks_pop_exposed <- tibble(state       = "",
year        = as.numeric(),
pop_exposed = as.numeric())
rm(ks_pop_exposed)
# KS .......................................................................
wells_in <- wells_all %>% filter(state == "KS")
# KS .......................................................................
wells_in <- wells_all %>% filter(state == "KS")
#for(year in c(1986:1998, 2000:2019)) {
for(year in c(2015:2019)) { ##### need to run this
#for(year in c(2011, 2014)) { ##### need to fix 2011, 2014
makeIntersectionZone(wells_in, year, "ks")
}
# SD .......................................................................
wells_in <- wells_all %>% filter(state == "SD")  ##### need to run this
for(year in c(1984:1985, 1988, 1999:2003, 2006:2007, 2011:2012, 2015:2016)) {
makeIntersectionZone(wells_in, year, "sd")
}
# KS .......................................................................
wells_in <- wells_all %>% filter(state == "KS")
glimpse(wells_in)
#for(year in c(1986:1998, 2000:2019)) {
for(year in c(2018:2019)) { ##### need to run this
#for(year in c(2011, 2014, 2017)) { ##### need to fix 2011, 2014
makeIntersectionZone(wells_in, year, "ks")
}
gc()
# attaches packages we need for this script
source("code/0-setup/01-setup.R")
library("terra")
# data input
pop_1990 <- rast("data/raw/socscape/us_pop1990myc.tif")
pop_2000 <- rast("data/raw/socscape/us_pop2000myc.tif")
pop_2010 <- rast("data/raw/socscape/us_pop2010myc.tif")
pop_2020 <- rast("data/raw/socscape/us_pop2020myc.tif")
# defines function to count population within 1 km of wells in wildfire burn
# areas for each state-year and outputs the estimate
assessPopulationExposed <- function(state_upper, state_lower, year) {
# flexibly imports relevant state-year wells in wildfire data
state_year_wells_in_wildfires <-
readRDS(paste("data/interim/wells_wildfire_intersection_state_year/",
state_lower, "_", year, ".rds", sep = "")) %>%
st_as_sf() %>%
st_make_valid() %>%
mutate(dummy_index = 1) %>%  # necessary to pass to vect()
vect()
# based on input year, defines appropriate population raster and variable
pop_raster <-
case_when(year %in% c(1984:1994) ~ "pop_1990",
year %in% c(1995:2004) ~ "pop_2000",
year %in% c(2005:2014) ~ "pop_2010",
year %in% c(2015:2020) ~ "pop_2020")
pop_variable <-
case_when(year %in% c(1984:1994) ~
"pop_estimate$us_pop1990myc.population_data",
year %in% c(1995:2004) ~
"pop_estimate$us_pop2000myc.population_data",
year %in% c(2005:2014) ~
"pop_estimate$us_pop2010myc.population_data",
year %in% c(2015:2020) ~
"pop_estimate$us_pop2020myc")
# crops and masks gridded population data
pop_estimate <-
terra::crop(eval(parse(text = pop_raster)), state_year_wells_in_wildfires)
pop_estimate <-
terra::mask(pop_estimate, state_year_wells_in_wildfires, touches = TRUE)
# captures estimated population living in mask
pop_estimate <- pop_estimate %>%
as.data.frame() %>%  # coerce to dataframe
as_tibble()  # then coerce to tibble (most comfortable to work with)
estimate_out <-
tibble(state       = state_upper,
year        = year,
pop_exposed = sum(eval(parse(text = pop_variable)), na.rm = TRUE))
return(estimate_out)
}
# KS .......................................................................
# makes tibble to capture data
ks_pop_exposed <- tibble(state       = "",
year        = as.numeric(),
pop_exposed = as.numeric())
# for each state-year with >= 1 wells in wildfire burn areas (previously
# assessed), estimates population within 1 km of those wells
#for(year in c(1986:1998, 2000:2019)) {  ##### need to fix 2011, 2014, 2017
for(year in c(1986:1998, 2000:2010, 2012:2013, 2015:2016, 2018:2019)) {
pop_exposed_out <-
assessPopulationExposed(state_upper = "KS", state_lower = "ks", year = year)
ks_pop_exposed <- ks_pop_exposed %>% bind_rows(pop_exposed_out)
}
write_csv(ks_pop_exposed, "output/results/ks_pop_exposed_2012_2019.csv")  # export
gc()
gc()
