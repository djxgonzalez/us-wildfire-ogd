theme_classic()
wells_wildfire_state_year %>%
filter(year %in% c(1984:2019)) %>%  # omitting 2020 with incomplete fire data
group_by(state, year) %>%
summarize(n = sum(n_wells)) %>%
ggplot(aes(year, n)) +
geom_point() +
geom_smooth(method = "lm", color = "black") +
geom_smooth(method = "lm", color = "blue", formula = y ~ poly(x, 2)) +
labs(x = "Year", y = "Wells (n)") +
facet_wrap(. ~ state) +
theme_classic()
model_fit <- glm(n_wells ~ year,
data = subset(wells_wildfire_state_year, state == "CA"))
summary(model_fit)
model_fit <- glm(n_wells ~ year,
data = subset(wells_wildfire_state_year, state == "OK"))
summary(model_fit)
model_fit <- glm(n_wells ~ year,
data = subset(wells_wildfire_state_year, state == "TX"))
summary(model_fit)
model_fit <- glm(n_wells ~ year,
data = subset(wells_wildfire_state_year, state == "KS"))
summary(model_fit)
model_fit <- glm(n_wells ~ year,
data = subset(wells_wildfire_state_year, state == "NM"))
summary(model_fit)
model_fit <- glm(n_wells ~ year,
data = subset(wells_wildfire_state_year, state == "WY"))
summary(model_fit)
source("../../code/0-setup/01-setup.R")
wells_all     <- readRDS("../../data/processed/wells_all.rds")
wildfires_all <- readRDS("../../data/processed/wildfires_all.rds")
wildfires_wells_population
source("../../code/0-setup/01-setup.R")
wildfires_wells_population <-
readRDS("../../data/processed/wildfires_wells_population.rds")
glimpse(wildfires_wells_population)
wildfires_wells_population <-
readRDS("../../data/processed/wildfires_wells_population.rds") %>%
filter(year %in% c(1984:2019))
source("../../code/0-setup/01-setup.R")
wildfires_wells_population <-
readRDS("../../data/processed/wildfires_wells_population.rds") %>%
filter(year %in% c(1984:2019))
wildfires_wells_population %>% arrange(desc(n_wells)) %>% select(-data_source)
wildfires_wells_population %>%
distinct(wildfire_id, .keep_all = TRUE) %>%
filter(year %in% c(1984:2020)) %>%
group_by(year) %>%
summarize(n = n()) %>%
ggplot() +
geom_bar(aes(year, n), stat = "identity") +
labs(x = "Year", y = "Wildfires, n") +
ylim(0, 3700) +
theme_classic()
wildfires_wells_population %>%
filter(year %in% c(1984:2020)) %>%
filter(n_wells > 0) %>%
group_by(year) %>%
summarize(n = n()) %>%
ggplot() +
geom_bar(aes(year, n), stat = "identity") +
labs(x = "Year", y = "Wildfires, n") +
ylim(0, 3700) +
theme_classic()
wildfires_wells_population %>%
mutate(wildfire_burned_wells = case_when(n_wells >= 1 ~ 1,
n_wells == 0 ~ 0)) %>%
group_by(year) %>%
summarize(n_wildfires = n(),
n_wildfires_with_wells = sum(wildfire_burned_wells)) %>%
mutate(perc_wildfires_with_wells =
round((100 * n_wildfires_with_wells / n_wildfires), digits = 2))
wildfires_wells_population %>%
mutate(wildfire_burned_wells = case_when(n_wells >= 1 ~ 1,
n_wells == 0 ~ 0)) %>%
group_by(year) %>%
summarize(n_wildfires = n(),
n_wildfires_with_wells = sum(wildfire_burned_wells)) %>%
mutate(proportion_wildfires_with_wells =
round((n_wildfires_with_wells / n_wildfires), digits = 2)) %>%
ggplot(aes(year, proportion_wildfires_with_wells)) +
geom_bar(stat = "identity") +
theme_classic()
wildfires_wells_population %>%
mutate(wildfire_burned_wells = case_when(n_wells >= 1 ~ 1,
n_wells == 0 ~ 0)) %>%
group_by(year) %>%
summarize(n_wildfires = n(),
n_wildfires_with_wells = sum(wildfire_burned_wells)) %>%
mutate(proportion_wildfires_with_wells =
round((n_wildfires_with_wells / n_wildfires), digits = 2)) %>%
ggplot(aes(year, proportion_wildfires_with_wells)) +
geom_point() +
geom_smooth(method = lm, formula = "y ~ x") +
theme_classic()
wildfires_wells_population %>%
group_by(state) %>%
summarize(n_wells_by_state = sum(n_wells),
n_wells_buffer_1km_by_state = sum(n_wells_buffer_1km)) %>%
arrange(desc(n_wells_by_state))
wildfires_wells_population %>%
filter(year %in% c(1984:2020)) %>%
group_by(year) %>%
summarize(n = sum(n_wells)) %>%
ggplot() +
geom_bar(aes(year, n), stat = "identity") +
labs(x = "Year", y = "Wells, n") +
theme_classic()
wildfires_wells_population %>%
filter(year %in% c(1984:2020)) %>%
group_by(year) %>%
summarize(n = sum(n_wells)) %>%
ggplot() +
geom_point(aes(year, n)) +
geom_smooth(aes(year, n), method = lm, formula = "y ~ x") +
labs(x = "Year", y = "Wells, n") +
theme_classic()
wildfires_wells_population %>%
filter(year %in% c(1984:2020)) %>%
group_by(year, state) %>%
summarize(n = n()) %>%
ggplot() +
geom_bar(aes(year, n), stat = "identity") +
labs(x = "Year", y = "Wildfires, n") +
facet_wrap(~ state) +
theme_classic()
wildfires_wells_population %>%
filter(year %in% c(1984:2020)) %>%
filter(n_wells > 0) %>%
group_by(year, state) %>%
summarize(n = n()) %>%
ggplot() +
geom_bar(aes(year, n), stat = "identity") +
labs(x = "Year", y = "Wildfires, n") +
facet_wrap(~ state) +
theme_classic()
wildfires_wells_population %>%
mutate(wildfire_burned_wells = case_when(n_wells >= 1 ~ 1,
n_wells == 0 ~ 0)) %>%
group_by(state) %>%
summarize(n_wildfires = n(),
n_wildfires_with_wells = sum(wildfire_burned_wells)) %>%
mutate(proportion_wildfires_with_wells =
round((n_wildfires_with_wells / n_wildfires), digits = 2)) %>%
ggplot(aes(state, proportion_wildfires_with_wells)) +
geom_bar(stat = "identity") +
theme_classic()
wildfires_wells_population %>%
filter(year %in% c(1984:2020)) %>%
group_by(year, state) %>%
summarize(n     = sum(n_wells)) %>%
ggplot() +
geom_bar(aes(year, n), stat = "identity") +
labs(x = "Year", y = "Wells, n") +
facet_wrap(. ~ state) +
theme_classic()
library("lubridate")
wells_all     <- readRDS("../../data/processed/wells_all.rds") %>%
filter(year(date_latest) <= 2019)
summary(wells_all$date_latest)
wildfires_all <- readRDS("../../data/processed/wildfires_all.rds") %>%
filter(year %in% c(1984:2019))
source("../../code/0-setup/01-setup.R")
library("lubridate")
wells_all     <- readRDS("../../data/processed/wells_all.rds") %>%
filter(year(date_latest) <= 2019)
wildfires_all <- readRDS("../../data/processed/wildfires_all.rds") %>%
filter(year %in% c(1984:2019))
####### pick up here; do we need this?
# wildfires_sf <- wildfires_all %>% st_as_sf(crs = crs_nad83) ##### change to WGS84
# wildfires_sf <- wildfires_sf %>%
#   st_make_valid() %>%
#   # group_by(wildfire_id) %>%
#   # summarize(geometry = st_union(geometry)) %>%
#   mutate(area = st_area(wildfires_sf)) ####
#   ##### adapted from redlining study:
#   #mutate(area_sqkm = (as.numeric(st_area(wildfires_all)) / 1000000))
wildfires_all %>%
distinct(wildfire_id, .keep_all = TRUE) %>%
ggplot() +
geom_bar(aes(state)) +
theme_classic()
wildfires_all %>%
distinct(wildfire_id, .keep_all = TRUE) %>%
ggplot() +
geom_bar(aes(year)) +
theme_classic()
wildfires_all %>%
distinct(wildfire_id, .keep_all = TRUE) %>%
ggplot() +
geom_bar(aes(year)) +
facet_wrap(~ state) +
theme_classic()
summary(wells_all)
print("Average duration of operation (years):")
d <- wells_all %>%
drop_na(first_prod_date) %>%
drop_na(last_prod_date) %>%
mutate(prod_duration = last_prod_date - first_prod_date) %>%
select(prod_duration)
d <- d %>% mutate(prod_duration = as.numeric(prod_duration)) %>%
filter(prod_duration > 0 & prod_duration < 32689)  # known max; removes errors
summary(as.numeric(d$prod_duration) / 365.25)
sd(as.numeric(d$prod_duration) / 365.25)
# makes figure
figure_3c <- data_3c %>%
ggplot()  +
geom_bar(aes(period, n_wells, fill = kbdi),
stat = "identity", position = "stack") +
scale_colour_manual(values = c("#AD8ABB", "#F0A3D0")) +
#scale_fill_grey(start = 0.6, end = 0.25) +
labs(x = "", y = "") +
ylim(0, 1200000) +
theme_classic() +
theme(axis.text.y  = element_blank(),
legend.position = "none")
# attaches necessary packages
source("code/0-setup/01-setup.R")
library("viridis")
wells_kbdi <- readRDS("data/processed/wells_kbdi.rds")
wells_wildfire_state_year <-
readRDS("data/processed/wells_wildfire_state_year.rds")
wildfires_wells_population <-
readRDS("data/processed/wildfires_wells_population.rds")
# summarizes results to feed into ggplot
data_3c <-
tibble(period  = c("2017", "2046-2054", "2086-2094",
"2017", "2046-2054", "2086-2094"),
kbdi    = c("450", "450", "450",
"600", "600", "600"),
n_wells = c(nrow(subset(wells_kbdi, kbdi_max_2017 >= 450 &
kbdi_max_2017 < 600)),
nrow(subset(wells_kbdi, kbdi_max_2050 >= 450 &
kbdi_max_2050 < 600)),
nrow(subset(wells_kbdi, kbdi_max_2090 >= 450 &
kbdi_max_2090 < 600)),
nrow(subset(wells_kbdi, kbdi_max_2017 >= 600)),
nrow(subset(wells_kbdi, kbdi_max_2050 >= 600)),
nrow(subset(wells_kbdi, kbdi_max_2090 >= 600))))
# makes figure
figure_3c <- data_3c %>%
ggplot()  +
geom_bar(aes(period, n_wells, fill = kbdi),
stat = "identity", position = "stack") +
scale_colour_manual(values = c("#AD8ABB", "#F0A3D0")) +
#scale_fill_grey(start = 0.6, end = 0.25) +
labs(x = "", y = "") +
ylim(0, 1200000) +
theme_classic() +
theme(axis.text.y  = element_blank(),
legend.position = "none")
figure_3c
# makes figure
figure_3c <- data_3c %>%
ggplot()  +
geom_bar(aes(period, n_wells, fill = kbdi),
stat = "identity", position = "stack") +
scale_fill_manual(values = c("#AD8ABB", "#F0A3D0")) +
#scale_fill_grey(start = 0.6, end = 0.25) +
labs(x = "", y = "") +
ylim(0, 1200000) +
theme_classic() +
theme(axis.text.y  = element_blank(),
legend.position = "none")
figure_3c
figure_3c
# exports figures
ggsave(filename = "figure_3c.png", plot = figure_3c, device = "png",
height = 2.4, width = 4, path = "output/figures/components/")
# makes figure
figure_3c <- data_3c %>%
ggplot()  +
geom_bar(aes(period, n_wells, fill = kbdi),
stat = "identity", position = "stack") +
scale_fill_manual(values = c("#7e5f8a", "#F0A3D0")) +
#scale_fill_grey(start = 0.6, end = 0.25) +
labs(x = "", y = "") +
ylim(0, 1200000) +
theme_classic() +
theme(axis.text.y  = element_blank(),
legend.position = "none")
# exports figures
ggsave(filename = "figure_3c.png", plot = figure_3c, device = "png",
height = 2.4, width = 4, path = "output/figures/components/")
# makes figure
figure_3c <- data_3c %>%
ggplot()  +
geom_bar(aes(period, n_wells, fill = kbdi),
stat = "identity", position = "stack") +
scale_fill_manual(values = c("#7e5f8a", "#ffb3df")) +
#scale_fill_grey(start = 0.6, end = 0.25) +
labs(x = "", y = "") +
ylim(0, 1200000) +
theme_classic() +
theme(axis.text.y  = element_blank(),
legend.position = "none")
# exports figures
ggsave(filename = "figure_3c.png", plot = figure_3c, device = "png",
height = 2.4, width = 4, path = "output/figures/components/")
figure_3c
# makes figure
figure_3c <- data_3c %>%
ggplot()  +
geom_bar(aes(period, n_wells, fill = kbdi),
stat = "identity", position = "stack") +
scale_fill_manual(values = c("#7e5f8a", "#ffb3df")) +
#scale_fill_grey(start = 0.6, end = 0.25) +
labs(x = "", y = "") +
ylim(0, 1200000) +
theme_classic() +
theme(axis.text.y  = element_blank(),
legend.position = "none")
# exports figures
ggsave(filename = "figure_3c.png", plot = figure_3c, device = "png",
height = 2.4, width = 4, path = "output/figures/components/")
# makes figure
figure_3c <- data_3c %>%
ggplot()  +
geom_bar(aes(period, n_wells, fill = kbdi),
stat = "identity", position = "stack") +
scale_fill_manual(values = c("#9D7FC7", "#ffb3df")) +
#scale_fill_grey(start = 0.6, end = 0.25) +
labs(x = "", y = "") +
ylim(0, 1200000) +
theme_classic() +
theme(axis.text.y  = element_blank(),
legend.position = "none")
# exports figures
ggsave(filename = "figure_3c.png", plot = figure_3c, device = "png",
height = 2.4, width = 4, path = "output/figures/components/")
# makes figure
figure_3c <- data_3c %>%
ggplot()  +
geom_bar(aes(period, n_wells, fill = kbdi),
stat = "identity", position = "stack") +
scale_fill_manual(values = c("#AD8ABB", "#ffb3df")) +
#scale_fill_grey(start = 0.6, end = 0.25) +
labs(x = "", y = "") +
ylim(0, 1200000) +
theme_classic() +
theme(axis.text.y  = element_blank(),
legend.position = "none")
figure_3c
summary(wells_all)
wells_all %>% filter(is.na(spud_date) | is.na(completion_date) | is.na(last_prod_date) | is.na(first_prod_date)) %>% nrow
# attaches necessary packages and functions
source("code/0-setup/01-setup.R")
source("code/1-data_tidying/01-fxn-tidy_wells_data.R")
# data input
wells_raw    <- read_csv("data/raw/enverus/enverus_wells_us.csv")
# restricts to study region and passes wells through custom tidying function
wells_all <- wells_raw %>%
filter(State %in% c("AK", "OR", "CA", "NV", "AZ", "MT", "WY", "UT", "CO",
"NM", "ND", "SD", "NE", "KS", "OK", "TX", "MO", "AR", "LA")) %>%
tidyWellsData()
# re-attaches factor variables to collapsed date variables and finalizes data
wells_all2 <- wells_all %>%
# adds var with earliest and latest observed dates across all date columns
mutate(date_earliest = pmin(spud_date, completion_date, first_prod_date,
last_prod_date, na.rm = TRUE),
date_latest   = pmax(spud_date, completion_date, first_prod_date,
last_prod_date, na.rm = TRUE)) %>%
# excludes wells where the earliest date was after December 31, 2020, the last
# date in the study period (retaining NAs)
filter(date_earliest <= "2019-12-31" | is.na(date_earliest)) %>%
st_as_sf(coords = c("longitude", "latitude"), crs = crs_nad83) %>%
st_make_valid()
summary(wells_all2)
# exports processed data ...................................................
saveRDS(wells_all2, "data/processed/wells_all.rds")
# removes datasets we no longer need .......................................
rm(wells_raw, wells_all, wells_all2)
source("../../code/0-setup/01-setup.R")
library("lubridate")
wells_all     <- readRDS("../../data/processed/wells_all.rds") %>%
filter(year(date_latest) <= 2019)
wildfires_all <- readRDS("../../data/processed/wildfires_all.rds") %>%
filter(year %in% c(1984:2019))
####### pick up here; do we need this?
# wildfires_sf <- wildfires_all %>% st_as_sf(crs = crs_nad83) ##### change to WGS84
# wildfires_sf <- wildfires_sf %>%
#   st_make_valid() %>%
#   # group_by(wildfire_id) %>%
#   # summarize(geometry = st_union(geometry)) %>%
#   mutate(area = st_area(wildfires_sf)) ####
#   ##### adapted from redlining study:
#   #mutate(area_sqkm = (as.numeric(st_area(wildfires_all)) / 1000000))
wildfires_all %>%
distinct(wildfire_id, .keep_all = TRUE) %>%
ggplot() +
geom_bar(aes(state)) +
theme_classic()
wildfires_all %>%
distinct(wildfire_id, .keep_all = TRUE) %>%
ggplot() +
geom_bar(aes(year)) +
theme_classic()
wildfires_all %>%
distinct(wildfire_id, .keep_all = TRUE) %>%
ggplot() +
geom_bar(aes(year)) +
facet_wrap(~ state) +
theme_classic()
summary(wells_all)
print("Average duration of operation (years):")
d <- wells_all %>%
drop_na(first_prod_date) %>%
drop_na(last_prod_date) %>%
mutate(prod_duration = last_prod_date - first_prod_date) %>%
select(prod_duration)
d <- d %>% mutate(prod_duration = as.numeric(prod_duration)) %>%
filter(prod_duration > 0 & prod_duration < 32689)  # known max; removes errors
summary(as.numeric(d$prod_duration) / 365.25)
sd(as.numeric(d$prod_duration) / 365.25)
knitr::opts_chunk$set(echo=FALSE)
source("../../code/0-setup/01-setup.R")
wells_wildfire_state_year <-
readRDS("../../data/processed/wells_wildfire_state_year.rds") %>%
filter(year %in% c(1984:2019))
wells_wildfire_state_year %>% group_by(state) %>% summarize(n = sum(n_wells))
# attaches functions .....................................................
source("code/0-setup/01-setup.R")
library("lubridate")  # for `year()` function
# data input .............................................................
us_states <- st_read("data/raw/esri/USA_States_Generalized.shp") %>%
rename(state = STATE_ABBR) %>%
select(state, geometry) %>%
filter(state %in%
c("OR", "CA", "NV", "AZ", "MT", "WY", "UT", "CO", "NM",
"ND", "SD", "NE", "KS", "OK", "TX", "MO", "AR", "LA")) %>%
st_transform(crs_albers)
alaska    <- st_read("data/raw/esri/USA_States_Generalized.shp") %>%
rename(state = STATE_ABBR) %>%
select(state, geometry) %>%
filter(state == "AK") %>%
st_transform(crs_alaska)
wells_all <- readRDS("data/processed/wells_all.rds") %>%
drop_na(date_earliest)
wells_all_orig <- readRDS("data/processed/wells_all.rds")
summary(wells_all)
wells_all %>% filter(date_earliest == as.date("1900-01-1")) %>% nrow
wells_all %>% filter(date_earliest == as.Date("1900-01-1")) %>% nrow
wells_all %>% filter(date_latest == as.Date("1900-01-1")) %>% nrow
summary(wells_all_orig)
wells_all %>% filter(is.na(date_earliest)) %>% nrow
wells_all_orig %>% filter(is.na(date_earliest)) %>% nrow
wells_all_orig %>% filter(is.na(date_earliest)) %>% filter(state %in%
c("CA", "AZ", "MT", "WY", "UT", "CO", "NM",
"ND", "SD", "NE", "KS", "OK", "TX", "AR", "LA")) %>% nrow()
185585/nrow(wells_all_orig)
filter(is.na(date_earliest)()
wells_all_no_dates <- readRDS("data/processed/wells_all.rds") %>%
wells_all_no_dates <- readRDS("data/processed/wells_all.rds") %>%
filter(is.na(date_earliest))
wildfires_all_union <-
readRDS("data/interim/wildfires_buffers/wildfires_all_union_no_buffer.rds")
wildfires_all_union
wells_all_no_dates
# data input .............................................................
wells_all_no_dates <- readRDS("data/processed/wells_all.rds") %>%
filter(is.na(date_earliest)) %>%
st_transform(crs_albers)
wells_all_no_dates
# determines wells without dates that intersect with any wildfire
wells_no_dates_wildfires <- wells_all_no_dates %>%
sample_n(10) %>%
st_intersection(wildfires_all_union)
# determines wells without dates that intersect with any wildfire
wells_no_dates_wildfires <- wells_all_no_dates %>%
st_intersection(wildfires_all_union)
rm(wells_all)
rm(wells_all_orig)
rm(wells_no_dates_wildfires)
rm(wells_wildfire_state_year)
rm(us_states)
rm(alaska)
# determines wells without dates that intersect with any wildfire
wells_no_dates_wildfires <- wells_all_no_dates %>%
st_intersection(wildfires_all_union)
wells_kbdi <- readRDS("data/processed/wells_kbdi.rds")
write_csv(wells_kbdi, "data/processed/wells_kbdi.csv")
# data input .............................................................
wells_all_no_dates <- readRDS("data/processed/wells_all.rds") %>%
filter(is.na(date_earliest)) #%>%
# attaches functions .....................................................
source("code/0-setup/01-setup.R")
wells_all <- readRDS("data/processed/wells_all.rds")
readRDS("data/inteirm/wells_all.rds")
readRDS("data/interim/wells_all.rds")
wells_all. <- readRDS("data/processed/wells_all.rds")
wells_all. <- readRDS("data/interim/wells_all.rds")
d <- wells_all.
d$county_parish
d2 <- d %>% filter(county_parish == "SANTA BARBARA (CA)")
rm(wells_all.)
View(d2)
# attaches functions .....................................................
source("code/0-setup/01-setup.R")
source("code/2-assessment/01-fxn-count_wells_in_wildfires.R")
library("parallel")   # for the `mclapply()` fxn, if using MacOS
library("lubridate")  # for `Year()` fxn
# data input .............................................................
wells_all     <- readRDS("data/processed/wells_all.rds")
d <- readRDS("data/interim/wells_buffers/wells_ca_buffer_1km.rds")
d
# attaches packages we need for this script
source("code/0-setup/01-setup.R")
library("terra")
# reads in gridded population data
population_1990 <- rast("data/raw/socscape/us_pop1990myc.tif")
