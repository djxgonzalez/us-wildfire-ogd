tidyWellsData()
# collapses wells that have duplicate API numbers
wells_all2 <- wells_all %>%
group_by(api_number) %>%
summarize(cumulative_boe  = max(cumulative_boe,  na.rm = TRUE),
months_produced = max(months_produced, na.rm = TRUE),
spud_date       = min(spud_date,       na.rm = TRUE),
completion_date = min(completion_date, na.rm = TRUE),
first_prod_date = min(first_prod_date, na.rm = TRUE),
last_prod_date  = max(last_prod_date,  na.rm = TRUE))
# addresses issue where -Inf or Inf is generated where NA's should be
wells_all2$cumulative_boe[!is.finite(wells_all2$cumulative_boe)]   <- NA
wells_all2$months_produced[!is.finite(wells_all2$months_produced)] <- NA
wells_all2$spud_date[!is.finite(wells_all2$spud_date)]             <- NA
wells_all2$completion_date[!is.finite(wells_all2$completion_date)] <- NA
wells_all2$first_prod_date[!is.finite(wells_all2$first_prod_date)] <- NA
wells_all2$last_prod_date[!is.finite(wells_all2$last_prod_date)]   <- NA
# isolates API number and factors to re-join with numeric/date vars in prev step
wells_all3 <- wells_all %>%
select(api_number, operator, county_parish, production_type, drill_type,
state, latitude, longitude) %>%
distinct(api_number, .keep_all = TRUE)
# re-attaches factor variables to collapsed date variables and finalizes data
wells_all4 <- left_join(wells_all3, wells_all2, by = "api_number") %>%
# adds var with earliest and latest observed dates across all date columns
mutate(date_earliest = pmin(spud_date, completion_date, first_prod_date,
last_prod_date, na.rm = TRUE),
date_latest   = pmax(spud_date, completion_date, first_prod_date,
last_prod_date, na.rm = TRUE)) %>%
st_as_sf(coords = c("longitude", "latitude"), crs = crs_nad83) %>%
st_make_valid()
summary(wells_id_wa)
# preps enverus data for ID and WA to match format of data from other states
# in the wells_raw dataset, so we can include them in the workflow below
wells_id_wa <- bind_rows(wells_id_raw, wells_wa_raw) %>%
mutate(API_UWI               = API14,
Operator_Company_Name = `Operator Company Name`,
County_Parish         = `County/Parish`,
Production_Type       = `Production Type`,
Drill_Type            = `Drill Type`,
First_Prod_Date       = `First Prod Date`,
Last_Prod_Date        = `Last Prod Date`,
Cum_BOE               = `Cum BOE`,
Completion_Date       = `Completion Date`,
Months_Produced       = `Months Produced`,
Spud_Date             = `Spud Date`,
latitude_WGS84        = `Surface Hole Latitude (WGS84)`,
longitude_WGS84       = `Surface Hole Longitude (WGS84)`) %>%
# restrict to necessary columns; need this to retain `State` in dataset
select(API_UWI, Operator_Company_Name, County_Parish, Production_Type,
Drill_Type, First_Prod_Date, Last_Prod_Date, Cum_BOE, Completion_Date,
Months_Produced, Spud_Date, State, latitude_WGS84, longitude_WGS84) %>%
drop_na(latitude_WGS84)
summary(wells_id_wa)
# attaches necessary packages and functions
source("code/0-setup/01-setup.R")
source("code/1-data_tidying/01-fxn-tidy_wells_data.R")
# data input
wells_raw    <- read_csv("data/raw/enverus/ogd_usa_small.csv")
wells_id_raw <- read_csv("data/raw/enverus/Idaho_All.csv")
wells_wa_raw <- read_csv("data/raw/enverus/Washington_All.csv")
## tidies and exports data  --------------------------------------------------
# preps enverus data for ID and WA to match format of data from other states
# in the wells_raw dataset, so we can include them in the workflow below
wells_id_wa <- bind_rows(wells_id_raw, wells_wa_raw) %>%
mutate(API_UWI               = API14,
Operator_Company_Name = `Operator Company Name`,
County_Parish         = `County/Parish`,
Production_Type       = `Production Type`,
Drill_Type            = `Drill Type`,
First_Prod_Date       = `First Prod Date`,
Last_Prod_Date        = `Last Prod Date`,
Cum_BOE               = `Cum BOE`,
Completion_Date       = `Completion Date`,
Months_Produced       = `Months Produced`,
Spud_Date             = `Spud Date`,
latitude_WGS84        = `Surface Hole Latitude (WGS84)`,
longitude_WGS84       = `Surface Hole Longitude (WGS84)`) %>%
# restrict to necessary columns; need this to retain `State` in dataset
select(API_UWI, Operator_Company_Name, County_Parish, Production_Type,
Drill_Type, First_Prod_Date, Last_Prod_Date, Cum_BOE, Completion_Date,
Months_Produced, Spud_Date, State, latitude_WGS84, longitude_WGS84) %>%
drop_na(latitude_WGS84)
# restricts to study region and passes wells through custom tidying function
wells_all <- wells_raw %>%
bind_rows(wells_id_wa) %>%  # adds data for ID and WA prepped above
filter(API_UWI > 0) %>%  # drops wells with missing API number
# restricts to wells in the study region
filter(State %in% c("AK", "WA", "OR", "CA", "ID", "NV", "AZ", "MT", "WY",
"UT", "CO", "NM", "ND", "SD", "NE", "KS", "OK", "TX",
"MN", "IA", "MO", "AR", "LA")) %>%
tidyWellsData()
# collapses wells that have duplicate API numbers
wells_all2 <- wells_all %>%
group_by(api_number) %>%
summarize(cumulative_boe  = max(cumulative_boe,  na.rm = TRUE),
months_produced = max(months_produced, na.rm = TRUE),
spud_date       = min(spud_date,       na.rm = TRUE),
completion_date = min(completion_date, na.rm = TRUE),
first_prod_date = min(first_prod_date, na.rm = TRUE),
last_prod_date  = max(last_prod_date,  na.rm = TRUE))
# addresses issue where -Inf or Inf is generated where NA's should be
wells_all2$cumulative_boe[!is.finite(wells_all2$cumulative_boe)]   <- NA
wells_all2$months_produced[!is.finite(wells_all2$months_produced)] <- NA
wells_all2$spud_date[!is.finite(wells_all2$spud_date)]             <- NA
wells_all2$completion_date[!is.finite(wells_all2$completion_date)] <- NA
wells_all2$first_prod_date[!is.finite(wells_all2$first_prod_date)] <- NA
wells_all2$last_prod_date[!is.finite(wells_all2$last_prod_date)]   <- NA
# isolates API number and factors to re-join with numeric/date vars in prev step
wells_all3 <- wells_all %>%
select(api_number, operator, county_parish, production_type, drill_type,
state, latitude, longitude) %>%
distinct(api_number, .keep_all = TRUE)
# re-attaches factor variables to collapsed date variables and finalizes data
wells_all4 <- left_join(wells_all3, wells_all2, by = "api_number") %>%
# adds var with earliest and latest observed dates across all date columns
mutate(date_earliest = pmin(spud_date, completion_date, first_prod_date,
last_prod_date, na.rm = TRUE),
date_latest   = pmax(spud_date, completion_date, first_prod_date,
last_prod_date, na.rm = TRUE)) %>%
st_as_sf(coords = c("longitude", "latitude"), crs = crs_nad83) %>%
st_make_valid()
# exports processed data ...................................................
saveRDS(wells_all4, "data/processed/wells_all.rds")
1801227 - nrow(wells_all4)
nrow(wells_all4) - 1801227
summary(wells_all4)
wildfires_all <- readRDS("data/processed/wildfires_all.rds")
summary(as.factor(wildfires_all$year))
d <- wells_all4 %>% filter(date_earliest <= "2020-12-31" | is.na*date_earliest)
d <- wells_all4 %>% filter(date_earliest <= "2020-12-31" | is.na(date_earliest)
)
summary(d)
nrow(wells_all4) - nrow(d)
wells_all4 <- wells_all4 %>% filter(date_earliest <= "2020-12-31" | is.na(date_earliest))
# exports processed data ...................................................
saveRDS(wells_all4, "data/processed/wells_all.rds")
# attaches packages we need for this script
source("code/0-setup/01-setup.R")
# loads necessary packages and defines global variables
source("../../code/0-setup/01-setup.R")
wells_all     <- readRDS("../../data/processed/wells_all.rds")
wildfires_all <- readRDS("../../data/processed/wildfires_all.rds")
length(unique(wildfires_all$wildfire_id))
# attaches packages we need for this script
source("code/0-setup/01-setup.R")
## data prep -----------------------------------------------------------------
# preps NIFC data  .........................................................
# i.e., dataset on wildfires in all states that were 2.5 - 1,000 acres
wildfires_nifc <- readRDS("data/raw/nifc/nifc_wildfires_1000acre.rds") %>%
as_tibble() %>%
st_as_sf() %>%
mutate(wildfire_id   = as.factor(OBJECTID),
wildfire_name = as.factor(INCIDENT),
year          = as.numeric(FIRE_YEAR),
state         = as.factor(STUSPS10),
data_source   = as.factor("NIFC")) %>%
rename(geometry = SHAPE) %>%
select(wildfire_id:data_source, geometry)
#wildfires_mtbs$area = st_area(wildfires_mtbs) # units unclear, need to sort out
# preps MTBS data ............................................................
# i.e., dataset on wildfires in all states that > 1,000 acres
wildfires_mtbs <- readRDS("data/raw/mtbs/wildfires_mtbs.rds") %>%
mutate(wildfire_id   = as.factor(Event_ID),
wildfire_name = as.factor(Incid_Name),
year          = as.numeric(Ig_Year),
state         = as.factor(State_Name),
data_source   = as.factor("MTBS")) %>%
select(wildfire_id:data_source, geometry)
## finalize and export -------------------------------------------------------
# identify wildfire duplicates that are present in both the MTBS and NIFC data
wildfires_all <- bind_rows(wildfires_nifc, wildfires_mtbs)
wildfires_duplicated_ids <-
wildfires_all[duplicated(wildfires_all$wildfire_id), 1] %>%
as_tibble() %>%
select(wildfire_id)
# removes duplicates from the NIFC dataset
wildfires_nifc2 <- wildfires_nifc %>%
as_tibble() %>%
filter(wildfire_id %!in% wildfires_duplicated_ids$wildfire_id) %>%
st_as_sf()
# retains wildfires that are duplicated only within the NIFC dataset, i.e.,
# wildfires that cross state boundaries
wildfires_nifc3 <-  # set of wildfire_id's for fires that cross state boundaries
wildfires_nifc[duplicated(wildfires_nifc$wildfire_id), 1] %>%
filter(wildfire_id %!in% wildfires_mtbs$wildfire_id)
# set of wildfires < 1,000 acres not present in MTBS dataset that cross
# state boundaries
wildfires_nifc4 <- wildfires_nifc %>%
filter(wildfire_id %in% wildfires_nifc3$wildfire_id)
# removes datasets we no longer need
rm(wildfires_all, wildfires_duplicated_ids, wildfires_nifc, wildfires_nifc3)
# binds wildfires from the two datasets and adds additional data on size
wildfires_all <- bind_rows(wildfires_nifc2, wildfires_mtbs) %>%
# adds wildfires < 1,000 acres that cross state boundaries
bind_rows(wildfires_nifc4) %>%
# restricts to wildfires in the study region
filter(state %in% c("WA", "OR", "CA", "ID", "NV", "AZ", "MT", "WY", "UT",
"CO", "NM", "ND", "SD", "NE", "KS", "OK", "TX", "MO",
"AR", "LA", "AK")) %>%
drop_na(year) %>%
filter(year %in% c(1984:2020))
summary(as.factor(wells_all$state))
summary(as.factor(wildfires_all$state))
# exports final wildfires dataset
saveRDS(wildfires_all, "data/processed/wildfires_all.rds")
# loads necessary packages and defines global variables
source("../../code/0-setup/01-setup.R")
wells_all     <- readRDS("../../data/processed/wells_all.rds")
wildfires_all <- readRDS("../../data/processed/wildfires_all.rds")
length(unique(wildfires_all$wildfire_id))
glimpse(wildfires_all[c(1:30000), ])
saveRDS(wildfires_all[c(1:30000), ], "data/wildfires_all1")
saveRDS(wildfires_all[c(1:30000), ], "data/wildfires_all1.rds")
1+2
saveRDS(wildfires_all[c(1:30000), ], "data/wildfires_all1.rds")
saveRDS(wildfires_all[c(30001:nrow(wildfires_all)), ], "data/wildfires_all2")
saveRDS(wildfires_all[c(30001:nrow(wildfires_all)), ], "data/wildfires_all2.rds")
summary(wells_all$production_type)
wells_all <- wells_all %>% filter(Production_Type %in% c("GAS", "O&G", "OIL"))
wells_all2 <- wells_all %>% filter(production_type %in% c("GAS", "O&G", "OIL"))
nrow(wells_all2) - nrow(wells_all)
summary(as.factor(wells_all$state))
summary(as.factor(wells_all2$state))
saveRDS(wells_all2, "data/processed/wells_all.rds")
wells_all <- wells_all2
rm(wells_all2)
##============================================================================##
## 2.07 - for each well, matches the KBDI wildfire risk values for the nearest
## terrestrial point for each of the three time periods: current (2017),
## mid-century (2046-2054, called 2050 here for convenience) and end-century
## (2086-2094, called 2090 here)
## setup ---------------------------------------------------------------------
source("code/0-setup/01-setup.R")
# data prep, part 1 ........................................................
# only need to run this once; un-comment and run if needed:
# study_region_sf <- st_read("data/raw/noaa/us_states/s_22mr22.shp") %>%
#   filter(STATE %in% c("WA", "OR", "CA", "ID", "NV", "AZ", "MT", "WY",
#                       "UT", "CO", "NM", "ND", "SD", "NE", "KS", "OK", "TX",
#                        "IA", "MO", "AR", "LA")) %>%  # MN isn't working
#   st_make_valid() %>%
#   st_transform() %>%
#   st_union() %>%
#   st_geometry()
# # exports processed data sine this step takes a minute
# saveRDS(study_region_sf, "data/interim/study_region_sf.rds")
## data prep, part 2 ........................................................
# reads in file generated in data prep part 1
study_region_sf <- readRDS("data/interim/study_region_sf.rds")
kbdi_max_2017_sf <- readRDS("data/processed/kbdi_max_2017.rds") %>%
as_tibble() %>%
st_as_sf(coords = c("x", "y"), crs = crs_nad83) %>%
st_intersection(study_region_sf)
kbdi_max_2050_sf <- readRDS("data/processed/kbdi_max_2050.rds") %>%
as_tibble() %>%
st_as_sf(coords = c("x", "y"), crs = crs_nad83) %>%
st_intersection(study_region_sf)
kbdi_max_2090_sf <- readRDS("data/processed/kbdi_max_2090.rds") %>%
as_tibble() %>%
st_as_sf(coords = c("x", "y"), crs = crs_nad83) %>%
st_intersection(study_region_sf)
wells_sf <- readRDS("data/interim/wells_all.rds")
wells_sf <- readRDS("data/processed/wells_all.rds")
rm(wells_sf)
## exposure assessment -------------------------------------------------------
## 2017 ....................................................................
# for each well, gets index of nearest KBDI point
wells_kbdi_index_2017 <-
st_nearest_feature(wells_all, kbdi_max_2017_sf)
# we use that index to attach the nearest KBDI to each well
wells_kbdi_2017 <- wells_all %>%
dplyr::select(api_number) %>%
as_tibble() %>%
mutate(kbdi_max_2017_index = wells_kbdi_index_2017) %>%
mutate(kbdi_max_2017 = kbdi_max_2017_sf$kbdi_max_2017[kbdi_max_2017_index]) %>%
dplyr::select(-c(kbdi_max_2017_index, geometry)) %>%
filter(api_number != "0")
## 2050 ....................................................................
# for each well, gets index of nearest KBDI point
wells_kbdi_index_2050 <-
st_nearest_feature(wells_all, kbdi_max_2050_sf)
# we use that index to attach the nearest KBDI to each well
wells_kbdi_2050 <- wells_all %>%
dplyr::select(api_number) %>%
as_tibble() %>%
mutate(kbdi_max_2050_index = wells_kbdi_index_2050) %>%
mutate(kbdi_max_2050 = kbdi_max_2050_sf$kbdi_max_2050[kbdi_max_2050_index]) %>%
dplyr::select(-c(kbdi_max_2050_index, geometry)) %>%
filter(api_number != "0")
## 2090 ....................................................................
# for each well, gets index of nearest KBDI point
wells_kbdi_index_2090 <-
st_nearest_feature(wells_all, kbdi_max_2090_sf)
# we use that index to attach the nearest KBDI to each well
wells_kbdi_2090 <- wells_all %>%
dplyr::select(api_number) %>%
as_tibble() %>%
mutate(kbdi_max_2090_index = wells_kbdi_index_2090) %>%
mutate(kbdi_max_2090 = kbdi_max_2090_sf$kbdi_max_2090[kbdi_max_2090_index]) %>%
dplyr::select(-c(kbdi_max_2090_index, geometry)) %>%
filter(api_number != "0")
## finalization and export ---------------------------------------------------
rm(kbdi_max_2017_sf, kbdi_max_2050_sf, kbdi_max_2090_sf, study_region_sf)
# binds columns for max KBDI for each well and each time period
wells_kbdi <- wells_all %>%
filter(api_number != "0") %>%
as_tibble() %>%
left_join(wells_kbdi_2017, by = "api_number") %>%
left_join(wells_kbdi_2050, by = "api_number") %>%
left_join(wells_kbdi_2090, by = "api_number")
# exports processed dataset
saveRDS(wells_kbdi, "data/processed/wells_kbdi.rds")
##============================================================================##
# only need to run this once; un-comment and run if needed:
study_region_sf <- st_read("data/raw/noaa/us_states/s_22mr22.shp") %>%
filter(STATE %in% c("WA", "OR", "CA", "ID", "NV", "AZ", "MT", "WY", "UT",
"CO", "NM", "ND", "SD", "NE", "KS", "OK", "TX", "MO",
"AR", "LA")) %>%
st_make_valid() %>%
st_transform() %>%
st_union() %>%
st_geometry()
# exports processed data sine this step takes a minute
saveRDS(study_region_sf, "data/interim/study_region_sf.rds")
kbdi_max_2017_sf <- readRDS("data/processed/kbdi_max_2017.rds") %>%
as_tibble() %>%
st_as_sf(coords = c("x", "y"), crs = crs_nad83) %>%
st_intersection(study_region_sf)
kbdi_max_2050_sf <- readRDS("data/processed/kbdi_max_2050.rds") %>%
as_tibble() %>%
st_as_sf(coords = c("x", "y"), crs = crs_nad83) %>%
st_intersection(study_region_sf)
kbdi_max_2090_sf <- readRDS("data/processed/kbdi_max_2090.rds") %>%
as_tibble() %>%
st_as_sf(coords = c("x", "y"), crs = crs_nad83) %>%
st_intersection(study_region_sf)
wells_all <- readRDS("data/processed/wells_all.rds")
## exposure assessment -------------------------------------------------------
## 2017 ....................................................................
# for each well, gets index of nearest KBDI point
wells_kbdi_index_2017 <-
st_nearest_feature(wells_all, kbdi_max_2017_sf)
# we use that index to attach the nearest KBDI to each well
wells_kbdi_2017 <- wells_all %>%
dplyr::select(api_number) %>%
as_tibble() %>%
mutate(kbdi_max_2017_index = wells_kbdi_index_2017) %>%
mutate(kbdi_max_2017 = kbdi_max_2017_sf$kbdi_max_2017[kbdi_max_2017_index]) %>%
dplyr::select(-c(kbdi_max_2017_index, geometry)) %>%
filter(api_number != "0")
## 2050 ....................................................................
# for each well, gets index of nearest KBDI point
wells_kbdi_index_2050 <-
st_nearest_feature(wells_all, kbdi_max_2050_sf)
# we use that index to attach the nearest KBDI to each well
wells_kbdi_2050 <- wells_all %>%
dplyr::select(api_number) %>%
as_tibble() %>%
mutate(kbdi_max_2050_index = wells_kbdi_index_2050) %>%
mutate(kbdi_max_2050 = kbdi_max_2050_sf$kbdi_max_2050[kbdi_max_2050_index]) %>%
dplyr::select(-c(kbdi_max_2050_index, geometry)) %>%
filter(api_number != "0")
## 2090 ....................................................................
# for each well, gets index of nearest KBDI point
wells_kbdi_index_2090 <-
st_nearest_feature(wells_all, kbdi_max_2090_sf)
# we use that index to attach the nearest KBDI to each well
wells_kbdi_2090 <- wells_all %>%
dplyr::select(api_number) %>%
as_tibble() %>%
mutate(kbdi_max_2090_index = wells_kbdi_index_2090) %>%
mutate(kbdi_max_2090 = kbdi_max_2090_sf$kbdi_max_2090[kbdi_max_2090_index]) %>%
dplyr::select(-c(kbdi_max_2090_index, geometry)) %>%
filter(api_number != "0")
## finalization and export ---------------------------------------------------
rm(kbdi_max_2017_sf, kbdi_max_2050_sf, kbdi_max_2090_sf, study_region_sf)
# binds columns for max KBDI for each well and each time period
wells_kbdi <- wells_all %>%
filter(api_number != "0") %>%
as_tibble() %>%
left_join(wells_kbdi_2017, by = "api_number") %>%
left_join(wells_kbdi_2050, by = "api_number") %>%
left_join(wells_kbdi_2090, by = "api_number")
# exports processed dataset
saveRDS(wells_kbdi, "data/processed/wells_kbdi.rds")
# loads necessary packages and defines global variables
source("../../code/0-setup/01-setup.R")
wells_kbdi <- readRDS("../../data/processed/wells_kbdi.rds")
study_region_sf <- readRDS("../../data/interim/study_region_sf.rds")
kbdi_max_2017_sf <- readRDS("../../data/processed/kbdi_max_2017.rds") %>%
as_tibble() %>%
st_as_sf(coords = c("x", "y"), crs = crs_nad83) %>%
st_intersection(study_region_sf)
kbdi_max_2050_sf <- readRDS("../../data/processed/kbdi_max_2050.rds") %>%
as_tibble() %>%
st_as_sf(coords = c("x", "y"), crs = crs_nad83) %>%
st_intersection(study_region_sf)
kbdi_max_2090_sf <- readRDS("../../data/processed/kbdi_max_2090.rds") %>%
as_tibble() %>%
st_as_sf(coords = c("x", "y"), crs = crs_nad83) %>%
st_intersection(study_region_sf)
rm(study_region_sf)
plot(kbdi_max_2017_sf)
wells_kbdi %>%
filter(kbdi_max_2017 >= 400) %>%
group_by(state) %>%
summarize(n = n()) %>%
ggplot() +
geom_bar(aes(state, n), stat = "identity") +
theme_classic()
wells_kbdi %>%
filter(kbdi_max_2017 >= 400) %>%
group_by(state) %>%
summarize(n = n()) %>%
arrange(desc(n))
plot(kbdi_max_2050_sf)
wells_kbdi %>%
filter(kbdi_max_2050 >= 400) %>%
group_by(state) %>%
summarize(n = n()) %>%
ggplot() +
geom_bar(aes(state, n), stat = "identity") +
theme_classic()
wells_kbdi %>%
filter(kbdi_max_2050 >= 400) %>%
group_by(state) %>%
summarize(n = n()) %>%
arrange(desc(n))
plot(kbdi_max_2090_sf)
wells_kbdi %>%
filter(kbdi_max_2090 >= 400) %>%
group_by(state) %>%
summarize(n = n()) %>%
ggplot() +
geom_bar(aes(state, n), stat = "identity") +
theme_classic()
wells_kbdi %>%
filter(kbdi_max_2090 >= 400) %>%
group_by(state) %>%
summarize(n = n()) %>%
arrange(desc(n))
plot(kbdi_max_2017_sf)
wells_kbdi %>%
filter(kbdi_max_2017 >= 600) %>%
group_by(state) %>%
summarize(n = n()) %>%
ggplot() +
geom_bar(aes(state, n), stat = "identity") +
theme_classic()
wells_kbdi %>%
filter(kbdi_max_2017 >= 600) %>%
group_by(state) %>%
summarize(n = n()) %>%
arrange(desc(n))
plot(kbdi_max_2050_sf)
wells_kbdi %>%
filter(kbdi_max_2050 >= 600) %>%
group_by(state) %>%
summarize(n = n()) %>%
ggplot() +
geom_bar(aes(state, n), stat = "identity") +
theme_classic()
wells_kbdi %>%
filter(kbdi_max_2050 >= 600) %>%
group_by(state) %>%
summarize(n = n()) %>%
arrange(desc(n))
plot(kbdi_max_2090_sf)
wells_kbdi %>%
filter(kbdi_max_2090 >= 600) %>%
group_by(state) %>%
summarize(n = n()) %>%
ggplot() +
geom_bar(aes(state, n), stat = "identity") +
theme_classic()
wells_kbdi %>%
filter(kbdi_max_2090 >= 600) %>%
group_by(state) %>%
summarize(n = n()) %>%
arrange(desc(n))
# loads necessary packages and defines global variables
source("code/0-setup/01-setup.R")
# data input .............................................................
wells_all     <- readRDS("data/processed/wells_all.rds")
wildfires_all <- readRDS("data/processed/wildfires_all.rds")
r_ok <- readRDS("output/results/fire_OK_all_dates_0km.rds")
View(r_ok)
class(r_ok)
sum(r_ok$wells_ok_all_dates_0km)
wildfires_all %>% filter(state == "OK") %>% View()
View(r_ok)
# attaches packages ........................................................
source("code/0-setup/01-setup.R")
library("lubridate")
# data input
wells_all <- readRDS("data/processed/wells_all.rds")
wells_co_buffer_1km <- wells_all %>%
filter(state == "CO") %>%
st_buffer(dist = 1000) %>%
st_union()
# data input
wells_all <- readRDS("data/processed/wells_all.rds")
wells_id_buffer_1km <- wells_all %>%
filter(state == "ID") %>%
st_buffer(dist = 1000) %>%
st_union()
saveRDS(wells_id_buffer_1km, "data/interim/buffers_wells/buffers_id_buffer_1km.rds")
wells_co_buffer_1km <- wells_all %>%
filter(state == "CO") %>%
st_buffer(dist = 1000) %>%
st_union()
rm(wells_id_buffer_1km)
