as_tibble() %>%
select(wildfire_id)
# removes duplicates from the NIFC dataset
wildfires_nifc2 <- wildfires_nifc %>%
as_tibble() %>%
filter(wildfire_id %!in% wildfires_duplicated_ids$wildfire_id) %>%
st_as_sf()
# removes datasets we no longer need
rm(wildfires_all, wildfires_duplicated_ids, wildfires_nifc)
# binds wildfires from the two datasets and adds additional data on size
wildfires_all <- bind_rows(wildfires_nifc2 wildfires_mtbs)
# binds wildfires from the two datasets and adds additional data on size
wildfires_all <- bind_rows(wildfires_nifc2, wildfires_mtbs)
length(unique(wildfires_all$wildfire_id))
w_duplicated_ids <- wildfires_all[duplicated(wildfires_all$wildfire_id), 1] %>%
as_tibble() %>%
select(wildfire_id)
w_duplicated <- wildfires_all %>%
as_tibble() %>%
filter(wildfire_id %in% w_duplicated_ids$wildfire_id)
View(w_duplicated)`
1
``
w_duplicated_ids <- wildfires_all[duplicated(wildfires_all$wildfire_id), 1] %>%
as_tibble() %>%
select(wildfire_id)
w_duplicated <- wildfires_all %>%
as_tibble() %>%
filter(wildfire_id %in% w_duplicated_ids$wildfire_id)
View(w_duplicated)
nrow(wildfires_all) - length(unique(wildfires_all$wildfire_id))
wildfires_nifc <- readRDS("data/raw/nifc/nifc_wildfires_1000acre.rds") %>%
as_tibble() %>%
st_as_sf() %>%
mutate(wildfire_id   = as.factor(OBJECTID),
wildfire_name = as.factor(INCIDENT),
year          = as.numeric(FIRE_YEAR),
state         = as.factor(STUSPS10),
data_source   = as.factor("NIFC")) %>%
rename(geometry = SHAPE) %>%
select(wildfire_id:data_source, geometry)
# retains wildfires that are duplicated only within the NIFC dataset, i.e.,
# wildfires that cross state boundaries
wildfires_nifc3 <-
wildfires_nifc[duplicated(wildfires_nifc$wildfire_id), 1] %>%
# removes datasets we no longer need
rm(wildfires_all, wildfires_duplicated_ids, wildfires_nifc)
duplicated(wildfires_nifc$wildfire_id)
# retains wildfires that are duplicated only within the NIFC dataset, i.e.,
# wildfires that cross state boundaries
wildfires_nifc3 <-
wildfires_nifc[duplicated(wildfires_nifc$wildfire_id), 1]
View(wildfires_nifc3)
d <- wildfires_nifc3 %>% filter(wildfire_id %in% wildfires_mtbs$wildfire_id)
View(d)
attaches packages we need for this script
# attaches packages we need for this script
source("code/0-setup/01-setup.R")
## data prep -----------------------------------------------------------------
# preps NIFC data  .........................................................
# i.e., dataset on wildfires in all states that were 2.5 - 1,000 acres
wildfires_nifc <- readRDS("data/raw/nifc/nifc_wildfires_1000acre.rds") %>%
as_tibble() %>%
st_as_sf() %>%
mutate(wildfire_id   = as.factor(OBJECTID),
wildfire_name = as.factor(INCIDENT),
year          = as.numeric(FIRE_YEAR),
state         = as.factor(STUSPS10),
data_source   = as.factor("NIFC")) %>%
rename(geometry = SHAPE) %>%
select(wildfire_id:data_source, geometry)
#wildfires_mtbs$area = st_area(wildfires_mtbs) # units unclear, need to sort out
# preps MTBS data ............................................................
# i.e., dataset on wildfires in all states that > 1,000 acres
wildfires_mtbs <- readRDS("data/raw/mtbs/wildfires_mtbs.rds") %>%
mutate(wildfire_id   = as.factor(Event_ID),
wildfire_name = as.factor(Incid_Name),
year          = as.numeric(Ig_Year),
state         = as.factor(State_Name),
data_source   = as.factor("MTBS")) %>%
select(wildfire_id:data_source, geometry)
## finalize and export -------------------------------------------------------
# identify wildfire duplicates that are present in both the MTBS and NIFC data
wildfires_all <- bind_rows(wildfires_nifc, wildfires_mtbs)
wildfires_duplicated_ids <-
wildfires_all[duplicated(wildfires_all$wildfire_id), 1] %>%
as_tibble() %>%
select(wildfire_id)
# removes duplicates from the NIFC dataset
wildfires_nifc2 <- wildfires_nifc %>%
as_tibble() %>%
filter(wildfire_id %!in% wildfires_duplicated_ids$wildfire_id) %>%
st_as_sf()
# retains wildfires that are duplicated only within the NIFC dataset, i.e.,
# wildfires that cross state boundaries
wildfires_nifc3 <-
wildfires_nifc[duplicated(wildfires_nifc$wildfire_id), 1]
View(wildfires_nifc3)
# retains wildfires that are duplicated only within the NIFC dataset, i.e.,
# wildfires that cross state boundaries
wildfires_nifc3 <-
wildfires_nifc[duplicated(wildfires_nifc$wildfire_id), 1] %>%
filter(wildfire_id %!in% wildfires_mtbs$wildfire_id)
# full set of wildfires; we'll bind this set of wildfires into `wildfires_all`
wildfires_nifc4 <- wildfires_nifc %>%
filter(wildfire_id %in% wildfires_nifc3$wildfire_id)
View(wildfires_nifc4)
# binds wildfires from the two datasets and adds additional data on size
wildfires_all <- bind_rows(wildfires_nifc2, wildfires_mtbs) %>%
bind_rows(wildfires_nifc4)
length(unique(wildfires_all$wildfire_id))
nrow(wildfires_all) - length(unique(wildfires_all$wildfire_id))
# removes datasets we no longer need
rm(wildfires_all, wildfires_duplicated_ids, wildfires_nifc, wildfires_nifc3)
d <- wildfires_all[duplicated(wildfires_all$wildfire_id), 1]
# binds wildfires from the two datasets and adds additional data on size
wildfires_all <- bind_rows(wildfires_nifc2, wildfires_mtbs) %>%
bind_rows(wildfires_nifc4)
d <- wildfires_all[duplicated(wildfires_all$wildfire_id), 1]
View(d)
d <- wildfires_all[duplicated(wildfires_all$wildfire_id), 1] %>% as_tibble()
d2 <- wildfires_all %>% filter(wildfire_id %in% d$wildfire_id)
View(d2)
187*2
levels(as.factor(wildfires_all$state))
# binds wildfires from the two datasets and adds additional data on size
wildfires_all <- bind_rows(wildfires_nifc2, wildfires_mtbs) %>%
# adds wildfires < 1,000 acres that cross state boundaries
bind_rows(wildfires_nifc4) %>%
# restricts
filter(STUSPS %in% c("WA", "OR", "CA", "ID", "NV", "AZ", "MT", "WY",
"UT", "CO", "NM", "ND", "SD", "NE", "KS", "OK", "TX",
"MN", "IA", "MO", "AR", "LA"))
rm(d)
rm(d2)
9*2+4
# binds wildfires from the two datasets and adds additional data on size
wildfires_all <- bind_rows(wildfires_nifc2, wildfires_mtbs) %>%
# adds wildfires < 1,000 acres that cross state boundaries
bind_rows(wildfires_nifc4) %>%
# restricts to wildfires in the study region
filter(state %in% c("WA", "OR", "CA", "ID", "NV", "AZ", "MT", "WY", "UT",
"CO", "NM", "ND", "SD", "NE", "KS", "OK", "TX", "MN",
"IA", "MO", "AR", "LA", "AL"))
# exports final wildfires dataset
saveRDS(wildfires_all, "data/process/wildfires_all.rds")
# exports final wildfires dataset
saveRDS(wildfires_all, "data/processed/wildfires_all.rds")
length(unique(wildfires_all$wildfire_id))
summary(as.factor(wildfires_all$state))
summary(as.factor(wildfires_all$year))
# binds wildfires from the two datasets and adds additional data on size
wildfires_all <- bind_rows(wildfires_nifc2, wildfires_mtbs) %>%
# adds wildfires < 1,000 acres that cross state boundaries
bind_rows(wildfires_nifc4) %>%
# restricts to wildfires in the study region
filter(state %in% c("WA", "OR", "CA", "ID", "NV", "AZ", "MT", "WY", "UT",
"CO", "NM", "ND", "SD", "NE", "KS", "OK", "TX", "MN",
"IA", "MO", "AR", "LA", "AL")) %>%
drop_na(year) %>%
filter(year %in% c(1984:2020))
# binds wildfires from the two datasets and adds additional data on size
wildfires_all <- bind_rows(wildfires_nifc2, wildfires_mtbs) %>%
# adds wildfires < 1,000 acres that cross state boundaries
bind_rows(wildfires_nifc4) %>%
# restricts to wildfires in the study region
filter(state %in% c("WA", "OR", "CA", "ID", "NV", "AZ", "MT", "WY", "UT",
"CO", "NM", "ND", "SD", "NE", "KS", "OK", "TX", "MN",
"IA", "MO", "AR", "LA", "AK")) %>%
drop_na(year) %>%
filter(year %in% c(1984:2020))
summary(as.factor(wildfires_all$state))
summary(wildfires_all)
# exports final wildfires dataset
saveRDS(wildfires_all, "data/processed/wildfires_all.rds")
# exports final wildfires dataset
saveRDS(wildfires_all[c(1:20000), ], "data/processed/wildfires_all1.rds")
# exports final wildfires dataset
View(wildfires_all[c(1:20000), ])
# exports final wildfires dataset
View(wildfires_all[c(20001:40000), ])
# exports final wildfires dataset
saveRDS(wildfires_all[c(20001:40000), ], "data/processed/wildfires_all2.rds")
# exports final wildfires dataset
saveRDS(wildfires_all[c(40001:nrow(wildfires_all)), ], "data/processed/wildfires_all2.rds")
# exports final wildfires dataset
saveRDS(wildfires_all[c(40001:nrow(wildfires_all)), ], "data/processed/wildfires_all3.rds")
# exports final wildfires dataset
saveRDS(wildfires_all[c(20001:40000), ], "data/processed/wildfires_all2.rds")
# loads necessary packages and defines global variables
source("../../code/0-setup/01-setup.R")
wildfires_all <- readRDS("../../data/interim/wildfires_all.rds")
wildfires_all <- readRDS("../../data/processed/wildfires_all.rds")
enverus_wells <- read_csv("data/raw/enverus/ogd_usa_small.csv") #%>%
rm(wildfires_all)
rm(enverus_wells)
wells_all <- read_csv("data/raw/enverus/ogd_usa_small.csv") #%>%
# cleans and prepares raw Enverus input data for further analysis
tidyEnverusWellsData <- function(wells) {
# captures well coordinates so we can re-join them later
wells <- wells %>%
mutate(api_number      = as.factor(API_UWI),
operator        = as.factor(Operator_Copmany_Name),
county_parish   = as.factor(County_Parish),
production_type = as.factor(Production_Type),
drill_type      = as.factor(Drill_Type),
cumulative_boe  = Cum_BOE,
months_produced = Months_Produced,
state           = as.factor(State),
latitude        = latitude_WGS84,
longitude       = longitude_WGS84,
#cumulative_boe  = `Cum BOE`,  # BOE = barrels of oil equivalent
spud_date       = Spud_Date,  # date the well was first drilled
completion_date = Completion_Date,
first_prod_date = First_Prod_Date, #1st date of production
last_prod_date  = Last_Prod_Date) %>% #Last date of production
dplyr::select(api_number:last_prod_date)
# returns tidied dataset
return(wells)
}
# attaches necessary packages and functions
source("code/0-setup/01-setup.R")
source("code/1-data_tidying/01-fxn-tidy_enverus_data.R")
# attaches necessary packages and functions
source("code/0-setup/01-setup.R")
source("code/1-data_tidying/01-fxn-tidy_enverus_data.R")
filter(API_UWI > 0) %>%
filter(State %in% c("AK", "WA", "OR", "CA", "ID", "NV", "AZ", "MT", "WY",
"UT", "CO", "NM", "ND", "SD", "NE", "KS", "OK", "TX",
"MN", "IA", "MO", "AR", "LA")) %>%
st_as_sf(coords = c("longitude_WGS84", "latitude_WGS84"), crs = crs_nad83) %>%
# honestly not sure what this does...
# mutate(across(c(Spud_Date, Completion_Date, First_Prod_Date, Last_Prod_Date),
#               ~ as.Date(as.character(.x), "%Y"))) %>%
tidyEnverusWellsData() %>%
st_make_valid() #%>%
wells_all <- read_csv("data/raw/enverus/ogd_usa_small.csv") %>%
filter(API_UWI > 0) %>%
filter(State %in% c("AK", "WA", "OR", "CA", "ID", "NV", "AZ", "MT", "WY",
"UT", "CO", "NM", "ND", "SD", "NE", "KS", "OK", "TX",
"MN", "IA", "MO", "AR", "LA")) %>%
st_as_sf(coords = c("longitude_WGS84", "latitude_WGS84"), crs = crs_nad83) %>%
# honestly not sure what this does...
# mutate(across(c(Spud_Date, Completion_Date, First_Prod_Date, Last_Prod_Date),
#               ~ as.Date(as.character(.x), "%Y"))) %>%
tidyEnverusWellsData() %>%
st_make_valid() #%>%
# data input
wells_raw <- read_csv("data/raw/enverus/ogd_usa_small.csv")
# cleans and prepares raw Enverus input data for further analysis
tidyEnverusWellsData <- function(wells) {
# captures well coordinates so we can re-join them later
wells <- wells %>%
mutate(api_number      = as.factor(API_UWI),
operator        = as.factor(Operator_Copmany_Name),
county_parish   = as.factor(County_Parish),
production_type = as.factor(Production_Type),
drill_type      = as.factor(Drill_Type),
cumulative_boe  = Cum_BOE,
months_produced = Months_Produced,
state           = as.factor(State),
latitude        = latitude_WGS84,
longitude       = longitude_WGS84,
spud_date       = Spud_Date,  # date the well was first drilled
completion_date = Completion_Date,
first_prod_date = First_Prod_Date, #1st date of production
last_prod_date  = Last_Prod_Date) %>% #Last date of production
dplyr::select(api_number:last_prod_date)
# returns tidied dataset
return(wells)
}
# cleans and prepares raw Enverus input data for further analysis
tidyEnverusWellsData <- function(wells) {
wells <- wells %>%
mutate(api_number      = as.factor(API_UWI),
operator        = as.factor(Operator_Copmany_Name),
county_parish   = as.factor(County_Parish),
production_type = as.factor(Production_Type),
drill_type      = as.factor(Drill_Type),
cumulative_boe  = Cum_BOE,
months_produced = Months_Produced,
state           = as.factor(State),
latitude        = latitude_WGS84,
longitude       = longitude_WGS84,
spud_date       = Spud_Date,  # date the well was first drilled
completion_date = Completion_Date,
first_prod_date = First_Prod_Date, #1st date of production
last_prod_date  = Last_Prod_Date) %>% #Last date of production
dplyr::select(api_number:last_prod_date)
return(wells)
}
# cleans and prepares raw Enverus input data for further analysis
tidyWellsData <- function(wells) {
wells <- wells %>%
mutate(api_number      = as.factor(API_UWI),
operator        = as.factor(Operator_Copmany_Name),
county_parish   = as.factor(County_Parish),
production_type = as.factor(Production_Type),
drill_type      = as.factor(Drill_Type),
cumulative_boe  = Cum_BOE,
months_produced = Months_Produced,
state           = as.factor(State),
latitude        = latitude_WGS84,
longitude       = longitude_WGS84,
spud_date       = Spud_Date,  # date the well was first drilled
completion_date = Completion_Date,
first_prod_date = First_Prod_Date, #1st date of production
last_prod_date  = Last_Prod_Date) %>% #Last date of production
dplyr::select(api_number:last_prod_date)
return(wells)
}
# attaches necessary packages and functions
source("code/0-setup/01-setup.R")
source("code/1-data_tidying/01-fxn-tidy_enverus_data.R")
source("code/1-data_tidying/01-fxn-tidy_wells_data.R")
# data input
wells_raw <- read_csv("data/raw/enverus/ogd_usa_small.csv")
wells_all <- wells_raw %>%
filter(API_UWI > 0) %>%  # drops wells with missing API number
filter(State %in% c("AK", "WA", "OR", "CA", "ID", "NV", "AZ", "MT", "WY",
"UT", "CO", "NM", "ND", "SD", "NE", "KS", "OK", "TX",
"MN", "IA", "MO", "AR", "LA")) %>%
tidyWellsData() #%>%
# cleans and prepares raw Enverus input data for further analysis
tidyWellsData <- function(wells) {
wells <- wells %>%
mutate(api_number      = as.factor(API_UWI),
operator        = as.factor(Operator_Company_Name),
county_parish   = as.factor(County_Parish),
production_type = as.factor(Production_Type),
drill_type      = as.factor(Drill_Type),
cumulative_boe  = Cum_BOE,
months_produced = Months_Produced,
state           = as.factor(State),
latitude        = latitude_WGS84,
longitude       = longitude_WGS84,
spud_date       = Spud_Date,  # date the well was first drilled
completion_date = Completion_Date,
first_prod_date = First_Prod_Date, #1st date of production
last_prod_date  = Last_Prod_Date) %>% #Last date of production
dplyr::select(api_number:last_prod_date)
return(wells)
}
wells_all <- wells_raw %>%
filter(API_UWI > 0) %>%  # drops wells with missing API number
filter(State %in% c("AK", "WA", "OR", "CA", "ID", "NV", "AZ", "MT", "WY",
"UT", "CO", "NM", "ND", "SD", "NE", "KS", "OK", "TX",
"MN", "IA", "MO", "AR", "LA")) %>%
tidyWellsData() #%>%
length(unique(wells_all$api_number))
nrow(wells_all) - length(unique(wells_all$api_number))
# attaches necessary packages and functions
source("code/0-setup/01-setup.R")
source("code/1-data_tidying/01-fxn-tidy_wells_data.R")
# data input
wells_raw <- read_csv("data/raw/enverus/ogd_usa_small.csv")
d <- wells_raw[duplicated(wells_raw$API_UWI), ]
View(d)
d <- filter(API_UWI > 0) %>%  wells_raw[duplicated(wells_raw$API_UWI), ]
d <- wells_raw[duplicated(wells_raw$API_UWI), ] %>% filter(API_UWI > 0)
View(d)
wells_all <- wells_raw %>%
filter(API_UWI > 0) %>%  # drops wells with missing API number
# restricts to wells in the study region
filter(State %in% c("AK", "WA", "OR", "CA", "ID", "NV", "AZ", "MT", "WY",
"UT", "CO", "NM", "ND", "SD", "NE", "KS", "OK", "TX",
"MN", "IA", "MO", "AR", "LA")) %>%
tidyWellsData() #%>%
wells_all <- wells_raw %>%
filter(API_UWI > 0) %>%  # drops wells with missing API number
# restricts to wells in the study region
filter(State %in% c("AK", "WA", "OR", "CA", "ID", "NV", "AZ", "MT", "WY",
"UT", "CO", "NM", "ND", "SD", "NE", "KS", "OK", "TX",
"MN", "IA", "MO", "AR", "LA")) %>%
tidyWellsData() %>%
# addresses duplicate wells
group_by(api_number) %>%
summarize(cumulative_boe  = max(cumulative_boe,  na.rm = TRUE),
months_produced = max(months_produced, na.rm = TRUE),
spud_date       = min(spud_date,       na.rm = TRUE),
completion_date = min(completion_date, na.rm = TRUE),
first_prod_date = min(first_prod_date, na.rm = TRUE),
last_prod_date  = max(last_prod_date,  na.rm = TRUE),
.keep_all = TRUE)
warnings()
rm(d)
wells_all <- wells_raw %>%
filter(API_UWI > 0) %>%  # drops wells with missing API number
# restricts to wells in the study region
filter(State %in% c("AK", "WA", "OR", "CA", "ID", "NV", "AZ", "MT", "WY",
"UT", "CO", "NM", "ND", "SD", "NE", "KS", "OK", "TX",
"MN", "IA", "MO", "AR", "LA")) %>%
tidyWellsData() #%>%
wells_all2 <- wells_all %>% ##### remove later
# addresses duplicate wells
group_by(api_number) %>%
summarize(cumulative_boe  = max(cumulative_boe,  na.rm = TRUE),
months_produced = max(months_produced, na.rm = TRUE),
spud_date       = min(spud_date,       na.rm = TRUE),
completion_date = min(completion_date, na.rm = TRUE),
first_prod_date = min(first_prod_date, na.rm = TRUE),
last_prod_date  = max(last_prod_date,  na.rm = TRUE),
.keep_all = TRUE)
max(c(as.date("2000-01-01"), as.date("2001-01-01")))
max(c(as.Date("2000-01-01"), as.Date("2001-01-01")))
min(c(as.Date("2000-01-01"), as.Date("2001-01-01")))
min(c(as.Date("2000-01-01"), as.Date("2001-01-01"), na))
min(c(as.Date("2000-01-01"), as.Date("2001-01-01"), NA))
max(c(as.Date("2000-01-01"), as.Date("2001-01-01"), NA))
max(c(NA, NA))
summary(wells_all)
summary(wells_all2)
wells_all2 <- wells_all %>% ##### remove later
# addresses duplicate wells
group_by(api_number) %>%
summarize(operator        = operator,
county_parish   = county_parish,
production_type = production_type,
drill_type      = drill_type,
state           = state,
latitude        = latitude,
longitude       = longitude,
cumulative_boe  = max(cumulative_boe,  na.rm = TRUE),
months_produced = max(months_produced, na.rm = TRUE),
spud_date       = min(spud_date,       na.rm = TRUE),
completion_date = min(completion_date, na.rm = TRUE),
first_prod_date = min(first_prod_date, na.rm = TRUE),
last_prod_date  = max(last_prod_date,  na.rm = TRUE)) #%>%
wells_all3 <- wells_all2 %>%
mutate(across(.cols = everything(), ~ ifelse(is.infinite(.x), 0, .x)))
wells_all3 <- wells_all2 %>%
mutate(spud_date = case_when(is.finite(spud_date)   ~ spud_date,
is.infinite(spud_date) ~ NA))
wells_all3 <- wells_all2
wells_all3$spud_date[!is.finite(wells_all3$spud_date)] <- NA
wells_all3$completion_date[!is.finite(wells_all3$completion_date)] <- NA
wells_all3$first_prod_date[!is.finite(wells_all3$first_prod_date)] <- NA
wells_all3$last_prod_date[!is.finite(wells_all3$last_prod_date)] <- NA
summary(wells_all2)
summary(wells_all3)
summary(wells_all)
wells_all %>% filter(api_number == "42489000500000") %>% View
a <- as.factor(c("A", "A", "A", "B", "B", "C", "C", "C", "C"))
max(a)
which.max(a)
names(which.max(a))
names(as.data.frame(which.max(a)))
names(which.max(as.data.frame(a)))
wells_all2 <- wells_all %>% ##### remove later
# addresses duplicate wells
group_by(api_number) %>%
summarize(cumulative_boe  = max(cumulative_boe,  na.rm = TRUE),
months_produced = max(months_produced, na.rm = TRUE),
spud_date       = min(spud_date,       na.rm = TRUE),
completion_date = min(completion_date, na.rm = TRUE),
first_prod_date = min(first_prod_date, na.rm = TRUE),
last_prod_date  = max(last_prod_date,  na.rm = TRUE)) #%>%
# addresses issue where -Inf or Inf is generated where NA's should be
wells_all2$spud_date[!is.finite(wells_all2$spud_date)] <- NA
wells_all2$completion_date[!is.finite(wells_all2$completion_date)] <- NA
wells_all2$first_prod_date[!is.finite(wells_all2$first_prod_date)] <- NA
wells_all2$last_prod_date[!is.finite(wells_all2$last_prod_date)] <- NA
rm(wells_all3)
rm(wells_raw)
rm(a)
summary(wells_all2)
# addresses issue where -Inf or Inf is generated where NA's should be
wells_all2$cumulative_boe[!is.finite(wells_all2$cumulative_boe)] <- NA
wells_all2$months_produced[!is.finite(wells_all2$months_produced)] <- NA
summary(wells_all2)
summary(wells_all)
# isolates API number and factors to re-join with numeric/date vars in prev step
wells_all3 <- wells_all %>%
select(api_number, operator, county_parish, production_type, drill_type,
state, latitude, longitude)
# isolates API number and factors to re-join with numeric/date vars in prev step
wells_all3 <- wells_all %>%
select(api_number, operator, county_parish, production_type, drill_type,
state, latitude, longitude) %>%
distinct(api_number, .keep_all = TRUE)
# re-attaches factor variables to collapsed date variables and finalizes data
wells_all4 <- left_join(wells_all3, wells_all2)
summary(wells_all4)
summary(wells_all)
?pmax
# re-attaches factor variables to collapsed date variables and finalizes data
wells_all4 <- left_join(wells_all3, wells_all2) %>%
mutate(date_earliest = pmin(spud_date, completion_date, first_prod_date,
last_prod, na.rm = TRUE),
date_latest   = pmax(spud_date, completion_date, first_prod_date,
last_prod, na.rm = TRUE)) #%>%
# re-attaches factor variables to collapsed date variables and finalizes data
wells_all4 <- left_join(wells_all3, wells_all2) %>%
mutate(date_earliest = pmin(spud_date, completion_date, first_prod_date,
last_prod_date, na.rm = TRUE),
date_latest   = pmax(spud_date, completion_date, first_prod_date,
last_prod_date, na.rm = TRUE)) #%>%
glimpse(wells_all4)
summary(wells_all4)
# re-attaches factor variables to collapsed date variables and finalizes data
wells_all4 <- left_join(wells_all3, wells_all2, by = "api_number") %>%
# adds var with earliest and latest observed dates across all date columns
mutate(date_earliest = pmin(spud_date, completion_date, first_prod_date,
last_prod_date, na.rm = TRUE),
date_latest   = pmax(spud_date, completion_date, first_prod_date,
last_prod_date, na.rm = TRUE)) %>%
st_as_sf(coords = c("longitude", "latitude"), crs = crs_nad83) %>%
st_make_valid()
# removes datasets we no longer need .......................................
rm(wells_all, wells_all2, wells_all3, wells_all4)
wells_all <- readRDS("data/processed/wells_all.rds")
wells_all <- readRDS("data/processed/wells_all.rds")
